// Nombre del parser
parser code { :parser MiParser :; }

// Importaciones necesarias
import java_cup.runtime.*;
import java.util.*;

action code {
  // Acciones globales (si es necesario)
}

init with {
  System.out.println("Inicio del análisis sintáctico...");
}

scan with {
  return scanner.yylex();
}

// Tokens que vienen desde el lexer
terminal ID, INT_LITERAL, FLOAT_LITERAL, BOOLEAN_LITERAL, STRING_LITERAL, CHAR_LITERAL;
terminal VOID, IF, ELSE, ELIF, DO, WHILE, FOR, RETURN, BREAK, WRITE, READ, COMMENT;
terminal ASSIGN, SEMICOLON, COMMA, LPAREN, RPAREN, LBRACE, RBRACE, PLUS, MINUS, MULT, DIV, POW, MOD, LT, LE, GT, GE, EQ, NE, NOT, AND, OR;
terminal TEXT;

// No terminales
non terminal program, main_func, func_decl, func_list, param_list, param, block, stmt_list, stmt, var_decl, array_decl, assign_stmt, expr, arith_expr, rel_expr, logic_expr, literal, control_struct, if_elif_else_stmt, if_elif_stmt, if_stmt, do_while_stmt, for_stmt, return_stmt, break_stmt, write_stmt, read_stmt, func_call, arg_list, elif_blocks, elif_block;

// Gramática
program ::= main_func | func_decl func_list ;

main_func ::= VOID "main" LPAREN RPAREN block ;

func_decl ::= type ID LPAREN param_list RPAREN block ;

func_list ::= func_decl func_list | ε ;

param_list ::= param COMMA param_list | param | ε ;

param ::= type ID ;

block ::= LBRACE stmt_list RBRACE ;

stmt_list ::= stmt stmt_list | ε ;

stmt ::= var_decl "?" 
       | assign_stmt "?" 
       | control_struct
       | read_stmt "?" 
       | write_stmt "?" 
       | return_stmt "?" 
       | break_stmt "?" 
       | comment 
       | var_decl_asisgn_stmt ;

var_decl ::= type ID 
          | array_decl ;

array_decl ::= type ID LBRACKET INT_LITERAL RBRACKET LBRACKET INT_LITERAL RBRACKET 
            | ε ;

assign_stmt ::= ID ASSIGN expr 
             | ID LBRACKET expr RBRACKET LBRACKET expr RBRACKET ASSIGN expr 
             | ID PLUS PLUS
             | ID MINUS MINUS
             | ε ;

var_decl_asisgn_stmt ::= var_decl ASSIGN expr ;

expr ::= arith_expr
      | rel_expr
      | logic_expr
      | literal
      | func_call
      | ID ;

arith_expr ::= expr PLUS expr
            | expr MINUS expr
            | expr DIV expr
            | expr MULT expr
            | expr POW expr
            | expr MOD expr
            | MINUS expr
            | ε ;

rel_expr ::= expr LT expr
          | expr LE expr
          | expr GT expr
          | expr GE expr
          | expr EQ expr
          | expr NE expr
          | ε ;

logic_expr ::= LPAREN expr AND expr RPAREN
            | LPAREN expr OR expr RPAREN
            | NOT expr ;

literal ::= INT_LITERAL
         | FLOAT_LITERAL
         | BOOLEAN_LITERAL
         | STRING_LITERAL
         | CHAR_LITERAL ;

control_struct ::= if_elif_else_stmt
               | if_elif_stmt
               | if_stmt
               | do_while_stmt
               | for_stmt ;

if_elif_else_stmt ::= IF LPAREN expr RPAREN block elif_blocks ELSE block ;

if_elif_stmt ::= IF LPAREN expr RPAREN block elif_block ;

if_stmt ::= IF LPAREN expr RPAREN block ;

elif_blocks ::= elif_block elif_blocks | elif_block | ε ;

elif_block ::= ELIF LPAREN expr RPAREN block ;

do_while_stmt ::= DO block WHILE LPAREN expr RPAREN SEMICOLON ;

for_stmt ::= FOR LPAREN assign_stmt SEMICOLON expr SEMICOLON assign_stmt RPAREN block ;

return_stmt ::= RETURN expr ;

break_stmt ::= BREAK ;

type ::= "int" | "float" | "boolean" | "char" | "string" ;

comment ::= COMMENT TEXT
         | LBRACE TEXT RBRACE ;

func_call ::= ID LPAREN arg_list RPAREN ;

arg_list ::= expr COMMA arg_list
          | expr 
          | ε ;

write_stmt ::= WRITE LPAREN ( ID | INT_LITERAL | STRING_LITERAL | FLOAT_LITERAL ) RPAREN ;

read_stmt ::= READ LPAREN RPAREN ;