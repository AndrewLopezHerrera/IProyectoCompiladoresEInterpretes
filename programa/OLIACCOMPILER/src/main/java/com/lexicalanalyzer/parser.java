
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.lexicalanalyzer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collection;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\051" +
    "\002\000\002\003\010\000\002\052\002\000\002\053\002" +
    "\000\002\004\012\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\006\005\000\002" +
    "\006\003\000\002\006\002\000\002\007\004\000\002\054" +
    "\002\000\002\010\006\000\002\011\004\000\002\011\002" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\045\007\000\002\045\012\000" +
    "\002\045\003\000\002\014\005\000\002\014\013\000\002" +
    "\014\010\000\002\014\004\000\002\014\004\000\002\015" +
    "\005\000\002\015\005\000\002\016\003\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\004\000\002\016\004\000\002\046\005\000\002\046" +
    "\004\000\002\047\005\000\002\047\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\050\003\000" +
    "\002\050\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\055\002" +
    "\000\002\024\006\000\002\056\002\000\002\025\010\000" +
    "\002\026\004\000\002\026\002\000\002\057\002\000\002" +
    "\027\010\000\002\030\004\000\002\030\002\000\002\060" +
    "\002\000\002\031\011\000\002\061\002\000\002\062\002" +
    "\000\002\063\002\000\002\032\016\000\002\033\004\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\006\000\002" +
    "\041\005\000\002\042\005\000\002\042\003\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\044\004\000\002\044\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\036\003\025\020\006\021\020\022\015\023" +
    "\007\024\017\025\031\026\023\027\024\030\004\031\011" +
    "\074\027\075\022\100\030\001\002\000\010\061\uff92\064" +
    "\uff92\077\uff92\001\002\000\036\003\025\020\006\021\020" +
    "\022\015\023\007\024\017\025\031\026\023\027\024\030" +
    "\004\031\011\074\027\075\022\100\030\001\002\000\004" +
    "\077\uff9a\001\002\000\004\077\uff97\001\002\000\004\077" +
    "\337\001\002\000\010\061\uff91\064\uff91\077\uff91\001\002" +
    "\000\004\002\336\001\002\000\004\002\000\001\002\000" +
    "\004\002\ufff8\001\002\000\004\077\uff98\001\002\000\004" +
    "\077\uff9c\001\002\000\004\077\uff96\001\002\000\004\077" +
    "\uff99\001\002\000\004\077\uff9b\001\002\000\074\003\uff8f" +
    "\011\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\063\uff8f\065\uff8f\066\uff8f\067" +
    "\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\077\uff8f\100\uff8f\001\002\000\010\061\uff94\064\uff94\077" +
    "\uff94\001\002\000\010\061\uff93\064\uff93\077\uff93\001\002" +
    "\000\004\002\ufff7\001\002\000\036\003\025\020\006\021" +
    "\020\022\015\023\007\024\017\025\031\026\023\027\024" +
    "\030\004\031\011\074\027\075\022\100\030\001\002\000" +
    "\074\003\uff90\011\uff90\015\uff90\016\uff90\017\uff90\020\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\063\uff90\065\uff90" +
    "\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074" +
    "\uff90\075\uff90\077\uff90\100\uff90\001\002\000\004\076\032" +
    "\001\002\000\010\061\uff95\064\uff95\077\uff95\001\002\000" +
    "\004\057\033\001\002\000\004\060\034\001\002\000\004" +
    "\062\uffff\001\002\000\004\062\037\001\002\000\004\002" +
    "\ufffe\001\002\000\072\003\ufff2\011\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\063\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\075\ufff2\077\ufff2\001\002\000\072" +
    "\003\061\011\uffae\015\047\016\074\017\062\020\006\021" +
    "\020\022\015\023\007\024\017\025\031\026\023\027\024" +
    "\030\004\031\011\032\070\033\044\063\uffef\065\067\066" +
    "\060\067\053\070\066\071\043\072\071\073\057\074\027" +
    "\075\022\077\056\001\002\000\074\003\uffb0\011\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\061\uffb0\063\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\077" +
    "\uffb0\001\002\000\074\003\uffaf\011\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\061\uffaf\063\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\077\uffaf\001\002" +
    "\000\006\007\334\077\333\001\002\000\004\077\332\001" +
    "\002\000\006\061\331\064\326\001\002\000\006\061\330" +
    "\064\314\001\002\000\004\057\uffa2\001\002\000\004\061" +
    "\303\001\002\000\010\061\uffde\064\uffde\077\uff9b\001\002" +
    "\000\004\061\302\001\002\000\006\004\301\077\300\001" +
    "\002\000\004\061\277\001\002\000\004\061\276\001\002" +
    "\000\010\054\262\057\173\064\263\001\002\000\032\004" +
    "\120\005\126\006\111\007\117\010\122\032\105\033\125" +
    "\036\112\044\124\053\116\057\106\077\114\001\002\000" +
    "\004\077\260\001\002\000\004\061\257\001\002\000\004" +
    "\061\uff9d\001\002\000\004\061\256\001\002\000\004\063" +
    "\255\001\002\000\072\003\uffe3\011\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\063\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\001\002\000\006" +
    "\005\254\077\253\001\002\000\004\077\252\001\002\000" +
    "\004\077\251\001\002\000\006\006\250\077\247\001\002" +
    "\000\004\061\246\001\002\000\074\003\uffea\011\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\061\245\063\uffea\065\uffea\066\uffea\067\uffea" +
    "\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\077" +
    "\uffea\001\002\000\004\062\uffa4\001\002\000\074\003\uffb1" +
    "\011\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\061\uffb1\063\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1" +
    "\075\uffb1\077\uffb1\001\002\000\072\003\061\011\uffae\015" +
    "\047\016\074\017\062\020\006\021\020\022\015\023\007" +
    "\024\017\025\031\026\023\027\024\030\004\031\011\032" +
    "\070\033\044\063\uffef\065\067\066\060\067\053\070\066" +
    "\071\043\072\071\073\057\074\027\075\022\077\056\001" +
    "\002\000\004\061\235\001\002\000\004\011\212\001\002" +
    "\000\004\077\102\001\002\000\010\054\103\061\uffe1\064" +
    "\uffe1\001\002\000\032\004\120\005\126\006\111\007\117" +
    "\010\122\032\105\033\125\036\112\044\124\053\116\057" +
    "\106\077\114\001\002\000\046\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\055\uffd2\056\uffd2" +
    "\060\uffd2\061\uffd2\001\002\000\004\077\211\001\002\000" +
    "\032\004\120\005\126\006\111\007\117\010\122\032\105" +
    "\033\125\036\112\044\124\053\116\057\106\077\114\001" +
    "\002\000\040\034\144\035\140\036\142\037\146\040\141" +
    "\041\131\042\137\043\145\045\134\046\133\047\135\050" +
    "\143\051\132\052\136\055\203\001\002\000\046\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\055\uffd1\056\uffd1\060\uffd1\061\uffd1\001\002\000\046\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\055\uffb4\056\uffb4\060\uffb4\061\uffb4\001\002\000\032" +
    "\004\120\005\126\006\111\007\117\010\122\032\105\033" +
    "\125\036\112\044\124\053\116\057\106\077\114\001\002" +
    "\000\046\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\055\uffd3\056\uffd3\060\uffd3\061\uffd3\001" +
    "\002\000\050\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\055\uffcf\056\uffcf\057\173\060\uffcf" +
    "\061\uffcf\001\002\000\046\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\056\uffd4\060" +
    "\uffd4\061\uffd4\001\002\000\006\004\165\053\166\001\002" +
    "\000\046\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\001" +
    "\002\000\046\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6" +
    "\001\002\000\046\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6\060\uffd6\061" +
    "\uffd6\001\002\000\046\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\055\uffb2\056\uffb2\060\uffb2" +
    "\061\uffb2\001\002\000\046\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0\056\uffd0\060" +
    "\uffd0\061\uffd0\001\002\000\032\004\120\005\126\006\111" +
    "\007\117\010\122\032\105\033\125\036\112\044\124\053" +
    "\116\057\106\077\114\001\002\000\004\077\127\001\002" +
    "\000\046\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5\001" +
    "\002\000\046\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd" +
    "\001\002\000\046\034\144\035\140\036\142\037\146\040" +
    "\141\041\131\042\137\043\145\045\134\046\133\047\135" +
    "\050\143\051\132\052\136\055\uffb9\056\uffb9\060\uffb9\061" +
    "\uffb9\001\002\000\032\004\120\005\126\006\111\007\117" +
    "\010\122\032\105\033\125\036\112\044\124\053\116\057" +
    "\106\077\114\001\002\000\032\004\120\005\126\006\111" +
    "\007\117\010\122\032\105\033\125\036\112\044\124\053" +
    "\116\057\106\077\114\001\002\000\032\004\120\005\126" +
    "\006\111\007\117\010\122\032\105\033\125\036\112\044" +
    "\124\053\116\057\106\077\114\001\002\000\032\004\120" +
    "\005\126\006\111\007\117\010\122\032\105\033\125\036" +
    "\112\044\124\053\116\057\106\077\114\001\002\000\032" +
    "\004\120\005\126\006\111\007\117\010\122\032\105\033" +
    "\125\036\112\044\124\053\116\057\106\077\114\001\002" +
    "\000\032\004\120\005\126\006\111\007\117\010\122\032" +
    "\105\033\125\036\112\044\124\053\116\057\106\077\114" +
    "\001\002\000\032\004\120\005\126\006\111\007\117\010" +
    "\122\032\105\033\125\036\112\044\124\053\116\057\106" +
    "\077\114\001\002\000\032\004\120\005\126\006\111\007" +
    "\117\010\122\032\105\033\125\036\112\044\124\053\116" +
    "\057\106\077\114\001\002\000\032\004\120\005\126\006" +
    "\111\007\117\010\122\032\105\033\125\036\112\044\124" +
    "\053\116\057\106\077\114\001\002\000\032\004\120\005" +
    "\126\006\111\007\117\010\122\032\105\033\125\036\112" +
    "\044\124\053\116\057\106\077\114\001\002\000\032\004" +
    "\120\005\126\006\111\007\117\010\122\032\105\033\125" +
    "\036\112\044\124\053\116\057\106\077\114\001\002\000" +
    "\032\004\120\005\126\006\111\007\117\010\122\032\105" +
    "\033\125\036\112\044\124\053\116\057\106\077\114\001" +
    "\002\000\032\004\120\005\126\006\111\007\117\010\122" +
    "\032\105\033\125\036\112\044\124\053\116\057\106\077" +
    "\114\001\002\000\032\004\120\005\126\006\111\007\117" +
    "\010\122\032\105\033\125\036\112\044\124\053\116\057" +
    "\106\077\114\001\002\000\046\034\144\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\137\043\145\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\056\uffc6" +
    "\060\uffc6\061\uffc6\001\002\000\046\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\055\uffba\056" +
    "\uffba\060\uffba\061\uffba\001\002\000\046\034\144\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\137\043\145\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\055\uffc5" +
    "\056\uffc5\060\uffc5\061\uffc5\001\002\000\046\034\144\035" +
    "\140\036\142\037\146\040\141\041\131\042\137\043\145" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\055" +
    "\uffc1\056\uffc1\060\uffc1\061\uffc1\001\002\000\046\034\144" +
    "\035\uffc7\036\uffc7\037\146\040\141\041\131\042\137\043" +
    "\145\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\055\uffc7\056\uffc7\060\uffc7\061\uffc7\001\002\000\046\034" +
    "\144\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\137" +
    "\043\145\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4\001\002\000\046" +
    "\034\144\035\uffc8\036\uffc8\037\146\040\141\041\131\042" +
    "\137\043\145\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\055\uffc8\056\uffc8\060\uffc8\061\uffc8\001\002\000" +
    "\046\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\001\002" +
    "\000\046\034\144\035\140\036\142\037\146\040\141\041" +
    "\131\042\137\043\145\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\055\uffbf\056\uffbf\060\uffbf\061\uffbf\001" +
    "\002\000\046\034\144\035\140\036\142\037\146\040\141" +
    "\041\131\042\137\043\145\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0" +
    "\001\002\000\046\034\144\035\140\036\142\037\146\040" +
    "\141\041\131\042\137\043\145\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\060\uffbd\061" +
    "\uffbd\001\002\000\046\034\144\035\140\036\142\037\146" +
    "\040\141\041\131\042\137\043\145\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\055\uffbc\056\uffbc\060\uffbc" +
    "\061\uffbc\001\002\000\046\034\144\035\140\036\142\037" +
    "\146\040\141\041\131\042\137\043\145\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\055\uffbe\056\uffbe\060" +
    "\uffbe\061\uffbe\001\002\000\046\034\144\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\137\043\145\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\056\uffc3" +
    "\060\uffc3\061\uffc3\001\002\000\006\053\uffc9\056\171\001" +
    "\002\000\046\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb" +
    "\001\002\000\004\053\170\001\002\000\046\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055" +
    "\uffcc\056\uffcc\060\uffcc\061\uffcc\001\002\000\004\004\165" +
    "\001\002\000\004\053\uffca\001\002\000\034\004\120\005" +
    "\126\006\111\007\117\010\122\032\105\033\125\036\112" +
    "\044\124\053\116\057\106\060\176\077\114\001\002\000" +
    "\042\034\144\035\140\036\142\037\146\040\141\041\131" +
    "\042\137\043\145\045\134\046\133\047\135\050\143\051" +
    "\132\052\136\056\200\060\uff8b\001\002\000\004\060\177" +
    "\001\002\000\046\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\045\uff8d\046\uff8d\047\uff8d" +
    "\050\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d\060\uff8d\061" +
    "\uff8d\001\002\000\046\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\055\uff8e\056\uff8e\060\uff8e" +
    "\061\uff8e\001\002\000\032\004\120\005\126\006\111\007" +
    "\117\010\122\032\105\033\125\036\112\044\124\053\116" +
    "\057\106\077\114\001\002\000\004\060\uff8c\001\002\000" +
    "\046\034\144\035\uffc2\036\uffc2\037\146\040\141\041\131" +
    "\042\137\043\145\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\055\uffc2\056\uffc2\060\uffc2\061\uffc2\001\002" +
    "\000\010\054\204\061\uffe0\064\uffe0\001\002\000\032\004" +
    "\120\005\126\006\111\007\117\010\122\032\105\033\125" +
    "\036\112\044\124\053\116\057\106\077\114\001\002\000" +
    "\040\034\144\035\140\036\142\037\146\040\141\041\131" +
    "\042\137\043\145\045\134\046\133\047\135\050\143\051" +
    "\132\052\136\055\206\001\002\000\006\061\uffdf\064\uffdf" +
    "\001\002\000\040\034\144\035\140\036\142\037\146\040" +
    "\141\041\131\042\137\043\145\045\134\046\133\047\135" +
    "\050\143\051\132\052\136\060\210\001\002\000\046\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\055\uffd5\056\uffd5\060\uffd5\061\uffd5\001\002\000\046" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\055\uffce\056\uffce\060\uffce\061\uffce\001\002\000" +
    "\004\057\230\001\002\000\100\003\uffa9\011\uffa9\012\214" +
    "\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\061\uffa9\063\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9" +
    "\075\uffa9\077\uffa9\001\002\000\004\057\223\001\002\000" +
    "\100\003\uffa9\011\uffa9\012\214\013\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\061\uffa9\063\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\077\uffa9\001\002" +
    "\000\076\003\uffa5\011\uffa5\013\220\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\061" +
    "\uffa5\063\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\077\uffa5\001\002\000" +
    "\074\003\uffad\011\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\061\uffad\063\uffad" +
    "\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073" +
    "\uffad\074\uffad\075\uffad\077\uffad\001\002\000\004\062\037" +
    "\001\002\000\074\003\uffa6\011\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\061" +
    "\uffa6\063\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\077\uffa6\001\002\000" +
    "\076\003\uffaa\011\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\061\uffaa" +
    "\063\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\074\uffaa\075\uffaa\077\uffaa\001\002\000\032" +
    "\004\120\005\126\006\111\007\117\010\122\032\105\033" +
    "\125\036\112\044\124\053\116\057\106\077\114\001\002" +
    "\000\040\034\144\035\140\036\142\037\146\040\141\041" +
    "\131\042\137\043\145\045\134\046\133\047\135\050\143" +
    "\051\132\052\136\060\225\001\002\000\004\062\uffa8\001" +
    "\002\000\004\062\037\001\002\000\100\003\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\061\uffa7\063\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\077\uffa7\001\002\000\032\004\120\005" +
    "\126\006\111\007\117\010\122\032\105\033\125\036\112" +
    "\044\124\053\116\057\106\077\114\001\002\000\040\034" +
    "\144\035\140\036\142\037\146\040\141\041\131\042\137" +
    "\043\145\045\134\046\133\047\135\050\143\051\132\052" +
    "\136\060\232\001\002\000\004\062\uffac\001\002\000\004" +
    "\062\037\001\002\000\100\003\uffab\011\uffab\012\uffab\013" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\061\uffab\063\uffab\065\uffab\066\uffab" +
    "\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075" +
    "\uffab\077\uffab\001\002\000\072\003\uffe4\011\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\063\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\077\uffe4\001\002" +
    "\000\004\063\ufff0\001\002\000\004\062\037\001\002\000" +
    "\004\014\241\001\002\000\004\057\242\001\002\000\032" +
    "\004\120\005\126\006\111\007\117\010\122\032\105\033" +
    "\125\036\112\044\124\053\116\057\106\077\114\001\002" +
    "\000\040\034\144\035\140\036\142\037\146\040\141\041" +
    "\131\042\137\043\145\045\134\046\133\047\135\050\143" +
    "\051\132\052\136\060\244\001\002\000\074\003\uffa3\011" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\061\uffa3\063\uffa3\065\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\077\uffa3\001\002\000\072\003\uffeb\011\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\063\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\077\uffeb\001\002" +
    "\000\072\003\uffe8\011\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\063\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\077\uffe8\001\002\000\004\061\uff83\001" +
    "\002\000\004\061\uff84\001\002\000\006\060\uffda\061\uffda" +
    "\001\002\000\004\061\uff82\001\002\000\004\061\uff87\001" +
    "\002\000\004\061\uff88\001\002\000\106\002\ufff1\003\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\061" +
    "\ufff1\063\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\073\ufff1\074\ufff1\075\ufff1\077\ufff1\100\ufff1\001" +
    "\002\000\072\003\uffec\011\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\063\uffec" +
    "\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073" +
    "\uffec\074\uffec\075\uffec\077\uffec\001\002\000\072\003\uffe2" +
    "\011\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\063\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2" +
    "\077\uffe2\001\002\000\004\061\uff81\001\002\000\040\034" +
    "\144\035\140\036\142\037\146\040\141\041\131\042\137" +
    "\043\145\045\134\046\133\047\135\050\143\051\132\052" +
    "\136\061\uff9e\001\002\000\032\004\120\005\126\006\111" +
    "\007\117\010\122\032\105\033\125\036\112\044\124\053" +
    "\116\057\106\077\114\001\002\000\032\004\120\005\126" +
    "\006\111\007\117\010\122\032\105\033\125\036\112\044" +
    "\124\053\116\057\106\077\114\001\002\000\042\034\144" +
    "\035\140\036\142\037\146\040\141\041\131\042\137\043" +
    "\145\045\134\046\133\047\135\050\143\051\132\052\136" +
    "\060\uffdd\061\uffdd\001\002\000\040\034\144\035\140\036" +
    "\142\037\146\040\141\041\131\042\137\043\145\045\134" +
    "\046\133\047\135\050\143\051\132\052\136\055\266\001" +
    "\002\000\006\054\267\064\270\001\002\000\032\004\120" +
    "\005\126\006\111\007\117\010\122\032\105\033\125\036" +
    "\112\044\124\053\116\057\106\077\114\001\002\000\032" +
    "\004\120\005\126\006\111\007\117\010\122\032\105\033" +
    "\125\036\112\044\124\053\116\057\106\077\114\001\002" +
    "\000\042\034\144\035\140\036\142\037\146\040\141\041" +
    "\131\042\137\043\145\045\134\046\133\047\135\050\143" +
    "\051\132\052\136\060\uffdb\061\uffdb\001\002\000\040\034" +
    "\144\035\140\036\142\037\146\040\141\041\131\042\137" +
    "\043\145\045\134\046\133\047\135\050\143\051\132\052" +
    "\136\055\273\001\002\000\004\064\274\001\002\000\032" +
    "\004\120\005\126\006\111\007\117\010\122\032\105\033" +
    "\125\036\112\044\124\053\116\057\106\077\114\001\002" +
    "\000\042\034\144\035\140\036\142\037\146\040\141\041" +
    "\131\042\137\043\145\045\134\046\133\047\135\050\143" +
    "\051\132\052\136\060\uffdc\061\uffdc\001\002\000\072\003" +
    "\uffed\011\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\063\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075" +
    "\uffed\077\uffed\001\002\000\072\003\uffe7\011\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\063\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\077\uffe7\001\002" +
    "\000\004\061\uff89\001\002\000\004\061\uff8a\001\002\000" +
    "\072\003\uffe9\011\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\063\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\077\uffe9\001\002\000\072\003\uffe6\011\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\063\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\077\uffe6" +
    "\001\002\000\004\057\305\001\002\000\034\020\006\021" +
    "\020\022\015\023\007\024\017\025\031\026\023\027\024" +
    "\030\004\031\011\032\070\033\044\077\306\001\002\000" +
    "\006\054\262\064\263\001\002\000\004\064\326\001\002" +
    "\000\004\061\316\001\002\000\004\061\uffb7\001\002\000" +
    "\004\064\314\001\002\000\004\061\uffb8\001\002\000\032" +
    "\004\120\005\126\006\111\007\117\010\122\032\105\033" +
    "\125\036\112\044\124\053\116\057\106\077\114\001\002" +
    "\000\040\034\144\035\140\036\142\037\146\040\141\041" +
    "\131\042\137\043\145\045\134\046\133\047\135\050\143" +
    "\051\132\052\136\061\uffd7\001\002\000\032\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\032\uffa1\033\uffa1\036\uffa1" +
    "\044\uffa1\053\uffa1\057\uffa1\077\uffa1\001\002\000\032\004" +
    "\120\005\126\006\111\007\117\010\122\032\105\033\125" +
    "\036\112\044\124\053\116\057\106\077\114\001\002\000" +
    "\040\034\144\035\140\036\142\037\146\040\141\041\131" +
    "\042\137\043\145\045\134\046\133\047\135\050\143\051" +
    "\132\052\136\061\321\001\002\000\010\032\uffa0\033\uffa0" +
    "\077\uffa0\001\002\000\010\032\070\033\044\077\306\001" +
    "\002\000\004\060\324\001\002\000\004\062\037\001\002" +
    "\000\074\003\uff9f\011\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\061\uff9f\063" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\077\uff9f\001\002\000\032\004" +
    "\120\005\126\006\111\007\117\010\122\032\105\033\125" +
    "\036\112\044\124\053\116\057\106\077\114\001\002\000" +
    "\040\034\144\035\140\036\142\037\146\040\141\041\131" +
    "\042\137\043\145\045\134\046\133\047\135\050\143\051" +
    "\132\052\136\061\uffd8\001\002\000\072\003\uffe5\011\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\063\uffe5\065\uffe5\066\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\077\uffe5" +
    "\001\002\000\072\003\uffee\011\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\063" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\073\uffee\074\uffee\075\uffee\077\uffee\001\002\000\006\060" +
    "\uffd9\061\uffd9\001\002\000\004\061\uff85\001\002\000\004" +
    "\061\uff86\001\002\000\004\002\ufffa\001\002\000\004\002" +
    "\001\001\002\000\004\057\ufffd\001\002\000\004\057\341" +
    "\001\002\000\030\020\006\021\020\022\015\023\007\024" +
    "\017\025\031\026\023\027\024\030\004\031\011\060\ufff4" +
    "\001\002\000\006\056\351\060\ufff5\001\002\000\004\077" +
    "\350\001\002\000\004\060\345\001\002\000\004\062\ufffc" +
    "\001\002\000\004\062\037\001\002\000\036\003\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\074\ufffb\075\ufffb\100\ufffb\001" +
    "\002\000\006\056\ufff3\060\ufff3\001\002\000\030\020\006" +
    "\021\020\022\015\023\007\024\017\025\031\026\023\027" +
    "\024\030\004\031\011\060\ufff4\001\002\000\004\060\ufff6" +
    "\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\022\002\011\003\013\004\025\005\012\035" +
    "\007\036\015\037\020\040\004\001\001\000\002\001\001" +
    "\000\020\003\013\004\025\005\352\035\007\036\015\037" +
    "\020\040\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\013\004\025\005\334\035" +
    "\007\036\015\037\020\040\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\034\001\001\000\004\010\035" +
    "\001\001\000\002\001\001\000\004\054\037\001\001\000" +
    "\052\011\063\012\075\013\044\014\054\015\062\023\072" +
    "\024\074\031\040\032\041\033\053\034\047\035\100\036" +
    "\015\037\050\040\064\041\076\043\071\044\051\045\045" +
    "\055\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\260\017\114\020\112\021\103\022\122\041\120\046\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\236\001\001\000\002\001\001\000\052\011\235\012" +
    "\075\013\044\014\054\015\062\023\072\024\074\031\040" +
    "\032\041\033\053\034\047\035\100\036\015\037\050\040" +
    "\064\041\076\043\071\044\051\045\045\055\077\001\001" +
    "\000\002\001\001\000\004\025\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\106\017\114\020\112" +
    "\021\103\022\122\041\120\046\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\206\017\114\020\112" +
    "\021\103\022\122\041\120\046\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\201" +
    "\017\114\020\112\021\103\022\122\041\120\046\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\127\017\114\020\112\021\103\022\122\041" +
    "\120\046\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\163\017" +
    "\114\020\112\021\103\022\122\041\120\046\107\001\001" +
    "\000\020\016\162\017\114\020\112\021\103\022\122\041" +
    "\120\046\107\001\001\000\020\016\161\017\114\020\112" +
    "\021\103\022\122\041\120\046\107\001\001\000\020\016" +
    "\160\017\114\020\112\021\103\022\122\041\120\046\107" +
    "\001\001\000\020\016\157\017\114\020\112\021\103\022" +
    "\122\041\120\046\107\001\001\000\020\016\156\017\114" +
    "\020\112\021\103\022\122\041\120\046\107\001\001\000" +
    "\020\016\155\017\114\020\112\021\103\022\122\041\120" +
    "\046\107\001\001\000\020\016\154\017\114\020\112\021" +
    "\103\022\122\041\120\046\107\001\001\000\020\016\153" +
    "\017\114\020\112\021\103\022\122\041\120\046\107\001" +
    "\001\000\020\016\152\017\114\020\112\021\103\022\122" +
    "\041\120\046\107\001\001\000\020\016\151\017\114\020" +
    "\112\021\103\022\122\041\120\046\107\001\001\000\020" +
    "\016\150\017\114\020\112\021\103\022\122\041\120\046" +
    "\107\001\001\000\020\016\147\017\114\020\112\021\103" +
    "\022\122\041\120\046\107\001\001\000\020\016\146\017" +
    "\114\020\112\021\103\022\122\041\120\046\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\171\001\001" +
    "\000\002\001\001\000\022\016\173\017\114\020\112\021" +
    "\103\022\122\041\120\042\174\046\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\173\017\114\020\112\021\103\022\122" +
    "\041\120\042\200\046\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\204\017\114" +
    "\020\112\021\103\022\122\041\120\046\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\215\027\214\001\001\000\002\001\001\000\006\026\221" +
    "\027\214\001\001\000\004\030\216\001\001\000\002\001" +
    "\001\000\004\010\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\223\017\114\020\112\021\103\022" +
    "\122\041\120\046\107\001\001\000\002\001\001\000\004" +
    "\057\225\001\001\000\004\010\226\001\001\000\002\001" +
    "\001\000\020\016\230\017\114\020\112\021\103\022\122" +
    "\041\120\046\107\001\001\000\002\001\001\000\004\056" +
    "\232\001\001\000\004\010\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\242" +
    "\017\114\020\112\021\103\022\122\041\120\046\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\264" +
    "\017\114\020\112\021\103\022\122\041\120\046\107\001" +
    "\001\000\020\016\263\017\114\020\112\021\103\022\122" +
    "\041\120\046\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\271\017\114\020\112" +
    "\021\103\022\122\041\120\046\107\001\001\000\020\016" +
    "\270\017\114\020\112\021\103\022\122\041\120\046\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\274\017\114\020\112\021\103\022\122" +
    "\041\120\046\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\306\014\312\015\310\035\100\036\015\037\050" +
    "\045\311\050\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\314\017\114\020\112\021" +
    "\103\022\122\041\120\046\107\001\001\000\002\001\001" +
    "\000\004\062\316\001\001\000\020\016\317\017\114\020" +
    "\112\021\103\022\122\041\120\046\107\001\001\000\002" +
    "\001\001\000\004\063\321\001\001\000\004\014\322\001" +
    "\001\000\002\001\001\000\004\010\324\001\001\000\002" +
    "\001\001\000\020\016\326\017\114\020\112\021\103\022" +
    "\122\041\120\046\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\337\001\001\000\002\001\001\000\014\006" +
    "\343\007\341\035\342\036\015\037\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\345\001\001\000\004\010\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\351\007\341\035\342\036" +
    "\015\037\020\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Contador de errores sintacticos
    public int error_count = 0;

    // Contador de errores semanticos
    public int error_semantic_count = 0;

    // Mapa de funciones declaradas en el programa
    private Map<String, Function> Functions = new HashMap<>();

    // Mapa de tablas de simbolos por cada funcion
    private Map<String, TablaDeSimbolos> FunctionTables = new HashMap<>();

    // Tabla de simbolos actual en uso
    private TablaDeSimbolos ActualTable = null;

    // Funcion actual en procesamiento
    private Function ActualFunction = null;

    //Pila de las instrucciones iterables que se han creado
    private List<EtiquetaEstructura> PilaIteradores = new ArrayList<>();

    private List<EtiquetaEstructura> PilaControl = new ArrayList<>();

    /**
     * Maneja errores sintacticos encontrados por el parser
     * @param s simbolo donde ocurrio el error
     */
    public void syntax_error(Symbol s) {
        if (s != null) {
            System.out.println("Error sintactico en la linea " + (s.left + 1) +
            ", columna " + (s.right + 1) + ": " + s.value);
        }
        error_count++;
    }

    private int currentLine(){
        return ((MiLexer)super.getScanner()).getLine();
    }

    /**
     * Reporta un error fatal durante el analisis sintactico
     * @param message descripcion del error
     * @param info objeto relacionado con el error
     */
    public void report_fatal_error(String message, Object info) {
        System.err.println(">>> Error FATAL de analisis sintactico: " + message);
    }

    /**
     * Crea una nueva funcion y su tabla de simbolos si no esta duplicada
     * @param pTypeReturn tipo de retorno de la funcion
     * @param pName nombre de la funcion
     * @param pRow fila de declaracion
     * @param pColumn columna de declaracion
     */
    public void createFunction(String pTypeReturn, String pName, int pRow, int pColumn){
        if(Functions.containsKey(pName)){
            ActualTable = null;
            ActualFunction = null;
            System.err.println("Error semantico: La funcion " + pName + " esta duplicada");
            error_semantic_count++;
        }
        else{
            Function function = new Function(pTypeReturn, pName, pRow, pColumn, true);
            ActualFunction = function;
            Functions.put(pName, function);
            TablaDeSimbolos table = new TablaDeSimbolos(null, pName);
            FunctionTables.put(pName, table);
            ActualTable = table;
        }
    }

    /**
     * Crea y agrega una variable a la tabla de simbolos actual
     * @param pTypeReturn tipo de dato
     * @param pName nombre de la variable
     * @param pRow fila de declaracion
     * @param pColumn columna de declaracion
     * @param pInitialized indica si esta inicializada
     * @return objeto LineaTabla si fue agregado correctamente, null si ya existe
     */
    public LineaTabla createVar(String pTypeReturn, String pName, int pRow, int pColumn, boolean pInitialized){
        LineaTabla line = new LineaTabla(pTypeReturn, pName, pRow, pColumn, pInitialized);
        if(!ActualTable.AgregarDato(line)){
            System.err.println("Error semantico: La variable " + pName + " esta duplicada");
            return null;
        }
        return line;
    }

    // Imprime todas las funciones y sus respectivas tablas de simbolos
    public void printTables(){
        System.out.println(Functions.toString() + "\n");
        Collection<TablaDeSimbolos> tables = FunctionTables.values();
        for (TablaDeSimbolos table : tables){
            System.out.println(table.toString());
        }
    }

    /**
     * Reporta un error semantico con o sin ubicacion
     * @param s simbolo donde ocurrio el error (puede ser null)
     * @param mensaje descripcion del error
     */
    public void semantic_error(Symbol s, String mensaje) {
        if (s != null) {
            System.err.println("Error semantico en la linea " + (s.left + 1) +
                            ", columna " + (s.right + 1) + ": " + mensaje);
        } else {
            System.err.println("Error semantico: " + mensaje);
        }
        error_semantic_count++;
    }

    // Lista de instrucciones intermedias generadas por el parser
    List<InstruccionIntermedia> codigoIntermedio = new ArrayList<>();

    // Contador para generar nombres unicos de temporales
    int contadorTemporales = 0;

    /**
     * Genera un nuevo nombre de temporal
     * @return nombre del temporal generado (ej: t0, t1...)
     */
    public String nuevoTemporal() {
        return "t" + (contadorTemporales++);
    }

    /**
     * Escribe las instrucciones intermedias en un archivo
     * @param archivo nombre del archivo de salida
     */
    public void escribirCodigoIntermedio(String archivo) {
        try (PrintWriter pw = new PrintWriter(new FileWriter(archivo))) {
            for (InstruccionIntermedia inst : codigoIntermedio) {
                pw.println(inst);
            }
        } catch (IOException e) {
            System.err.println("No se pudo escribir el archivo de codigo intermedio.");
        }
    }

    // Contador para generar nombres unicos de etiquetas
    private int contadorEtiquetas = 0;

    /**
     * Genera una nueva etiqueta con un nombre base
     * @param base prefijo de la etiqueta
     * @return etiqueta generada (ej: et_if_0, et_else_1...)
     */
    public String nuevaEtiqueta(String base) {
        return "et_" + base + "_" + (contadorEtiquetas++);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= func_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;

    // Se crea la funcion main con tipo de retorno void
    int row = 0;
    int column = 0;
    createFunction("void", "main", row, column);
    parser.codigoIntermedio.add(new InicioFuncionInstr("main"));
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_func ::= VOID MAIN PARENTHESIS_L PARENTHESIS_R NT$0 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_func",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeFunction = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    if(typeFunction != null && name != null){
        // Se obtiene el nombre y tipo de la funcion
        String nameFunction = name.toString();
        String type = typeFunction.toString();
        int row = 0;
        int column = 0;

        // Se registra la funcion en la tabla global
        createFunction(type, nameFunction, row, column);
        parser.codigoIntermedio.add(new InicioFuncionInstr(nameFunction));
        RESULT = null;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object typeFunction = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    if(params != null){
        // Se registra la lista de parametros en la funcion
        String paramsFunction = params.toString();
        String nameFunction = name.toString();
        Function function = Functions.get(nameFunction);
        function.setArguments(paramsFunction);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_decl ::= type ID NT$1 PARENTHESIS_L param_list PARENTHESIS_R NT$2 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object typeFunction = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_list ::= func_decl func_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_list ::= comment func_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_list ::= main_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_list ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_list ::= param COMMA param_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null && typeList != null){
        String types = typeList.toString();
        String typeVar = type.toString();
        RESULT = typeVar + " " + types;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_list ::= param 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param ::= type ID 
            {
              Object RESULT =null;
		int typeVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && typeVar != null && name != null){
        String nameVar = name.toString();
        String tipo = typeVar.toString();
        int row = 0;
        int column = 0;
        
        createVar(tipo, nameVar, row, column, true); // Lo marcas como inicializado
        parser.codigoIntermedio.add(new ParamInstr(tipo, nameVar)); // genera los parametros
        RESULT = tipo;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;

    if(ActualTable != null){
        TablaDeSimbolos table = new TablaDeSimbolos(ActualTable, ActualTable.getNombre());
        ActualTable.AgregarHijo(table);
        ActualTable = table;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block ::= OPEN_BLOCK NT$3 stmt_list CLOSE_BLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if(ActualTable != null){
        RESULT = ActualTable;
        ActualTable = ActualTable.getPadre();
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= var_decl END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= assign_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= var_decl_asisgn_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= control_struct END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= control_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= read_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= write_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= return_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= break_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= array_decl END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= func_call END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= comment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= error END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_decl ::= type ID 
            {
              Object RESULT =null;
		int typeVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Verifica que exista una tabla de simbolos activa y que los datos no sean nulos
    if(ActualTable != null && typeVar != null && name != null){
        String nameFunction = typeVar.toString(); // Se obtiene el tipo de la variable
        String type = name.toString();           // Se obtiene el nombre de la variable
        int row = 0;                             // Se asigna la fila (puede mejorarse luego)
        int column = 0;                          // Se asigna la columna (puede mejorarse luego)
        
        // Crea la variable en la tabla actual sin marcarla como inicializada
        RESULT = createVar(nameFunction, type, row, column, false);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_decl ::= type ID LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_decl ::= type ID LBRACKET expr RBRACKET LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // array_decl ::= matrix_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign_stmt ::= ID ASSIGN expr 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (ActualTable != null && name != null && type != null) {
            String id = name.toString();
            String[] tipoValor = (String[]) type; // tipo y valor temporal
            String tipoExpr = tipoValor[0];
            String valorExpr = tipoValor[1];

            LineaTabla line = ActualTable.BuscarDato(id);
            if (line == null || !ActualTable.setInicializacionDato(id, true)) {
                error_semantic_count++;
                System.err.println("El identificador " + id + " no existe.");
            } else if (!tipoExpr.equals(line.getTipo())) {
                error_semantic_count++;
                System.err.println("Error semantico: no se puede asignar el tipo " +
                    tipoExpr + " a la variable " + id + " de tipo " + line.getTipo() + ".");
            } else {
                parser.codigoIntermedio.add(new AsignacionInstr(id, valorExpr));
                if (ActualTable != null) {
                    ActualTable.agregarInstruccion(new AsignacionInstr(id, valorExpr));
                }
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign_stmt ::= ID LBRACKET expr RBRACKET LBRACKET expr RBRACKET ASSIGN expr 
            {
              Object RESULT =null;
		
        // TODO: Codigo intermedio para asignacion a matriz 2D
        System.err.println("⚠ Asignacion a matriz 2D aun no implementada.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_stmt ::= ID LBRACKET expr RBRACKET ASSIGN expr 
            {
              Object RESULT =null;
		
        // TODO: Codigo intermedio para asignacion a matriz 1D
        System.err.println("Asignacion a matriz 1D aun no implementada.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_stmt ::= ADDITION_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (ActualTable != null && name != null) {
            String id = name.toString();
            LineaTabla line = ActualTable.BuscarDato(id);
            if (line == null) {
                error_semantic_count++;
                System.err.println("El identificador " + id + " no existe.");
            } else if (!line.getTipo().equals("int")) {
                error_semantic_count++;
                System.err.println("El operador ++ solo se permite sobre enteros.");
            } else {
                String temp = parser.nuevoTemporal();
                parser.codigoIntermedio.add(new OperacionInstr(temp, id, "+", "1"));
                parser.codigoIntermedio.add(new AsignacionInstr(id, temp));
                if (ActualTable != null) {
                    ActualTable.agregarInstruccion(new OperacionInstr(temp, id, "+", "1"));
                    ActualTable.agregarInstruccion(new AsignacionInstr(id, temp));
                }
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assign_stmt ::= SUBTRACT_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (ActualTable != null && name != null) {
            String id = name.toString();
            LineaTabla line = ActualTable.BuscarDato(id);
            if (line == null) {
                error_semantic_count++;
                System.err.println("El identificador " + id + " no existe.");
            } else if (!line.getTipo().equals("int")) {
                error_semantic_count++;
                System.err.println("El operador -- solo se permite sobre enteros.");
            } else if (!line.getEstaInicializado()) {
                error_semantic_count++;
                System.err.println("No se ha inicializado el identificador " + id);
            } else {
                String temp = parser.nuevoTemporal();
                parser.codigoIntermedio.add(new OperacionInstr(temp, id, "-", "1"));
                parser.codigoIntermedio.add(new AsignacionInstr(id, temp));
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_decl_asisgn_stmt ::= var_decl ASSIGN expr 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (ActualTable != null && var != null && type != null) {
        String[] tipoValor = (String[]) type; // tipo y valor temporal
        String tipoExpr = tipoValor[0];       // tipo de la expresion
        String valorExpr = tipoValor[1];      // resultado o temporal de la expresion

        LineaTabla line = (LineaTabla) var;   // linea correspondiente a la variable declarada
        if (line == null || !ActualTable.setInicializacionDato(line.getNombre(), true)) {
            error_semantic_count++;
            System.err.println("El identificador " + line.getNombre() + " no existe");
        } 
        else if (!tipoExpr.equals(line.getTipo())) {
            error_semantic_count++;
            System.err.println("Error semantico: no se puede asignar el tipo " +
                tipoExpr + " a la variable " + line.getNombre() + " con tipo " +
                line.getTipo() + ".");
        } 
        else {
            // Codigo intermedio para declaracion con asignacion
            parser.codigoIntermedio.add(new DeclAsigInstr(line.getTipo(), line.getNombre(), valorExpr));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_asisgn_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_decl_asisgn_stmt ::= array_decl ASSIGN expr 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if (ActualTable != null && array != null) {
        LineaTabla varLine = (LineaTabla) array;
        if (varLine != null && !ActualTable.setInicializacionDato(varLine.getNombre(), true)) {
            System.err.println(varLine.getNombre() + " no existe en la linea " +
                varLine.getFila() + " y columna " + varLine.getColumna());
            error_semantic_count++;
        }
    }
    RESULT = null; // Asignacion a matrices aun no genera codigo intermedio

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_asisgn_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= func_call 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= PARENTHESIS_L expr PARENTHESIS_R 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(type != null)
        RESULT = type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= arith_expr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= rel_expr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= logic_expr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= array_int_expr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= literal 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= ID 
            {
              Object RESULT =null;
		int idDeclaratedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idDeclaratedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idDeclarated = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (ActualTable != null && idDeclarated != null) {
        String id = idDeclarated.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if (line == null) {
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        } else if (!line.getEstaInicializado()) {
            error_semantic_count++;
            System.err.println("No se ha inicializado el identificador " + id);
        } else {
            RESULT = new String[] { line.getTipo(), id };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= ADDITION_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
        else{
            if(!line.getTipo().equals("int")){
                System.err.println("No se permite el uso del ++ con el tipo " +
                    line.getTipo() + " en el identificador " + line.getNombre());
                error_semantic_count++;
            }
            else if(!line.getEstaInicializado()){
                System.err.println("No se ha inicializado el identificador " +
                    line.getNombre());
                error_semantic_count++;
            }
            else{
                RESULT = new String[] {line.getTipo(), id};
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= SUBTRACT_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
        else{
            if(!line.getTipo().equals("int")){
                System.err.println("No se permite el uso del -- con el tipo " +
                    line.getTipo() + " en el identificador " + line.getNombre());
                error_semantic_count++;
            }
            else if(!line.getEstaInicializado()){
                System.err.println("No se ha inicializado el identificador " +
                    line.getNombre());
                error_semantic_count++;
            }
            else{
                RESULT = new String[] {line.getTipo(), id};
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // array_int_expr ::= BRACKET array_int_expr_list BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // array_int_expr ::= BRACKET BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // array_int_expr_list ::= INT_LITERAL COMMA array_int_expr_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // array_int_expr_list ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arith_expr ::= expr ADDITION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Se extraen tipos y valores de ambas expresiones
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "+", val2));

            RESULT = new String[] {
                (tipo1.equals("float") || tipo2.equals("float")) ? "float" : "int",
                temp
            };
        } else {
            Symbol operador = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1);
            parser.semantic_error(operador, "no se puede sumar " + tipo1 + " con " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arith_expr ::= expr SUBTRACT expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "-", val2));

            RESULT = new String[] {
                (tipo1.equals("float") || tipo2.equals("float")) ? "float" : "int",
                temp
            };
        } else {
            Symbol operador = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1);
            parser.semantic_error(operador, "no se puede restar " + tipo1 + " con " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arith_expr ::= expr MULTIPLICATION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "*", val2));

            RESULT = new String[] {
                (tipo1.equals("float") || tipo2.equals("float")) ? "float" : "int",
                temp
            };
        } else {
            Symbol operador = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1);
            parser.semantic_error(operador, "no se puede multiplicar " + tipo1 + " con " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arith_expr ::= expr POWERS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "*", val2));

            RESULT = new String[] {
                (tipo1.equals("float") || tipo2.equals("float")) ? "float" : "int",
                temp
            };
        } else {
            Symbol operador = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1);
            parser.semantic_error(operador, "no se puede multiplicar " + tipo1 + " con " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arith_expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "/", val2));

            RESULT = new String[] {
                "float", // La division siempre se interpreta como flotante
                temp
            };
        } else {
            Symbol operador = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1);
            parser.semantic_error(operador, "no se puede dividir " + tipo1 + " con " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arith_expr ::= expr MODULE expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            tipo1.equals("int") && tipo2.equals("int")) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "%", val2));

            RESULT = new String[] { "int", temp };
        }
    } else {
        Symbol operador = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1);
        parser.semantic_error(operador, "el operador modulo solo se permite entre enteros");
        RESULT = new String[] { "error", "" };
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arith_expr ::= SUBTRACT expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v = (String[]) e;
    if(ActualTable != null && e != null){
        String tipo = v[0];
        String val = v[1];

        if (ActualTable != null && e != null &&
            (tipo.equals("int") || tipo.equals("float"))) {
            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, "-", val, ""));
            RESULT = new String[] { tipo, temp };
        } else {
            parser.semantic_error(null, "el operador unario '-' solo se permite para enteros o flotantes");
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_expr ::= expr LT expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "<", val2));
            RESULT = new String[] { "boolean", temp };
        } else {
            parser.semantic_error(null, "'<' no válido entre " + tipo1 + " y " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rel_expr ::= expr LE expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "<=", val2));
            RESULT = new String[] { "boolean", temp };
        } else {
            parser.semantic_error(null, "'<=' no válido entre " + tipo1 + " y " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rel_expr ::= expr GT expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, ">", val2));
            RESULT = new String[] { "boolean", temp };
        } else {
            parser.semantic_error(null, "'>' no válido entre " + tipo1 + " y " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rel_expr ::= expr GE expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (ActualTable != null && e1 != null && e2 != null &&
            (tipo1.equals("int") || tipo1.equals("float")) &&
            (tipo2.equals("int") || tipo2.equals("float"))) {

            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, ">=", val2));
            RESULT = new String[] { "boolean", temp };
        } else {
            parser.semantic_error(null, "'>=' no válido entre " + tipo1 + " y " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rel_expr ::= expr EQ expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];
        if (tipo1.equals(tipo2)) {
            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "==", val2));
            RESULT = new String[] { "boolean", temp };
        } else {
            parser.semantic_error(null, "comparación '==' entre tipos diferentes: " + tipo1 + " y " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rel_expr ::= expr NEQ expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;
    if(ActualTable != null && e1 != null && e2 != null){
        String tipo1 = v1[0], val1 = v1[1];
        String tipo2 = v2[0], val2 = v2[1];

        if (tipo1.equals(tipo2)) {
            String temp = parser.nuevoTemporal();
            parser.codigoIntermedio.add(new OperacionInstr(temp, val1, "!=", val2));
            RESULT = new String[] { "boolean", temp };
        } else {
            parser.semantic_error(null, "comparación '!=' entre tipos diferentes: " + tipo1 + " y " + tipo2);
            RESULT = new String[] { "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logic_expr ::= expr CONJUNCTION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;

    if (ActualTable != null && e1 != null && e2 != null &&
        v1[0].equals("boolean") && v2[0].equals("boolean")) {
        String temp = parser.nuevoTemporal();
        parser.codigoIntermedio.add(new OperacionInstr(temp, v1[1], "&&", v2[1]));
        RESULT = new String[] { "boolean", temp };
    } else {
        parser.semantic_error(null, "'&&' solo aplica a booleanos, recibió " + v1[0] + " y " + v2[0]);
        RESULT = new String[] { "error", "" };
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logic_expr ::= expr DISJUNCTION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v1 = (String[]) e1;
    String[] v2 = (String[]) e2;

    if (ActualTable != null && e1 != null && e2 != null &&
        v1[0].equals("boolean") && v2[0].equals("boolean")) {
        String temp = parser.nuevoTemporal();
        parser.codigoIntermedio.add(new OperacionInstr(temp, v1[1], "||", v2[1]));
        RESULT = new String[] { "boolean", temp };
    } else {
        parser.semantic_error(null, "'||' solo aplica a booleanos, recibió " + v1[0] + " y " + v2[0]);
        RESULT = new String[] { "error", "" };
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logic_expr ::= DENIAL expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] v = (String[]) e;

    if (ActualTable != null && e != null && v[0].equals("boolean")) {
        String temp = parser.nuevoTemporal();
        parser.codigoIntermedio.add(new OperacionUnariaInstr(temp, "!", v[1]));
        RESULT = new String[] { "boolean", temp };
    } else {
        parser.semantic_error(null, "negación (!) solo aplica a booleanos, recibió " + v[0]);
        RESULT = new String[] { "error", "" };
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for_assign ::= assign_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // for_assign ::= var_decl_asisgn_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new String[] { "int", n.toString() };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new String[] { "float", n.toString() };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new String[] { "boolean", n.toString() };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new String[] { "string", n.toString() };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new String[] { "char", n.toString() };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // control_struct ::= if_elif_else_stmt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // control_struct ::= do_while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // control_struct ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$4 ::= 
            {
              Object RESULT =null;

    if(ActualTable != null){
        String etiquedaInicio = nuevaEtiqueta("if_elif_else_inicio");
        String etiquedaIntermedia = nuevaEtiqueta("if_elif_else_intermedio");
        String etiquetaFin = nuevaEtiqueta("if_elif_else_final");
        PilaControl.add(new EtiquetaEstructura(etiquedaInicio,
            etiquedaIntermedia, etiquetaFin));
        parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaInicio));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_elif_else_stmt ::= NT$4 if_block elif_blocks else_block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    if(ActualTable != null){
        EtiquetaEstructura iterador = PilaControl.get(PilaControl.size()-1);
        parser.codigoIntermedio.add(new EtiquetaInstr(iterador.getEtiquetaFinal()));
        PilaControl.removeLast();
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_elif_else_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$5 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    if(ActualTable != null && cond != null){
        String[] condicion = (String[]) cond;
        if(condicion[0].equals("boolean")){
            String etiquedaInicio = nuevaEtiqueta("if_inicio");
            String etiquedaIntermedia = nuevaEtiqueta("if_intermedio");
            String etiquetaFin = nuevaEtiqueta("if_final");
            PilaControl.add(new EtiquetaEstructura(etiquedaInicio,
                etiquedaIntermedia, etiquetaFin));
            parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaInicio));
            parser.codigoIntermedio.add(new IfGotoInstr(condicion[1], etiquedaIntermedia));
            parser.codigoIntermedio.add(new GotoInstr(etiquetaFin));
            parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaIntermedia));
        }
        else{
            System.err.println("Error semántico: La estructura de control if " +
                "espera un tipo booleano en su argumento, en cambio se envió " +
                "un tipo " + condicion[0] + ".");
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_block ::= IF PARENTHESIS_L expr PARENTHESIS_R NT$5 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockDataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockDataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blockData = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && cond != null && blockData != null){
        TablaDeSimbolos table = (TablaDeSimbolos) blockData;
        table.setNombre("if");
        EtiquetaEstructura estructura = PilaControl.removeLast();
        EtiquetaEstructura estructuraPadre = PilaControl.get(PilaControl.size()-1);
        parser.codigoIntermedio.add(new GotoInstr(estructuraPadre.getEtiquetaFinal()));
        parser.codigoIntermedio.add(new EtiquetaInstr(estructura.getEtiquetaFinal()));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // elif_blocks ::= elif_block elif_blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_blocks",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // elif_blocks ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_blocks",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$6 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    if(ActualTable != null && cond != null){
        String[] condicion = (String[]) cond;
        if(condicion[0].equals("boolean")){
            String etiquedaInicio = nuevaEtiqueta("elif_inicio");
            String etiquedaIntermedia = nuevaEtiqueta("elif_intermedio");
            String etiquetaFin = nuevaEtiqueta("elif_final");
            PilaControl.add(new EtiquetaEstructura(etiquedaInicio,
                etiquedaIntermedia, etiquetaFin));
            parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaInicio));
            parser.codigoIntermedio.add(new IfGotoInstr(condicion[1], etiquedaIntermedia));
            parser.codigoIntermedio.add(new GotoInstr(etiquetaFin));
            parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaIntermedia));
        }
        else{
            System.err.println("Error semántico: La estructura de control if " +
                "espera un tipo booleano en su argumento, en cambio se envió " +
                "un tipo " + condicion[0] + ".");
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // elif_block ::= ELIF PARENTHESIS_L expr PARENTHESIS_R NT$6 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockDataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockDataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blockData = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && cond != null && blockData != null){
        TablaDeSimbolos table = (TablaDeSimbolos) blockData;
        table.setNombre("elif");
        EtiquetaEstructura estructura = PilaControl.removeLast();
        EtiquetaEstructura estructuraPadre = PilaControl.get(PilaControl.size()-1);
        parser.codigoIntermedio.add(new GotoInstr(estructuraPadre.getEtiquetaFinal()));
        parser.codigoIntermedio.add(new EtiquetaInstr(estructura.getEtiquetaFinal()));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_block",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // else_block ::= ELSE block 
            {
              Object RESULT =null;
		int blockDataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockDataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blockData = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && blockData != null){
        TablaDeSimbolos table = (TablaDeSimbolos) blockData;
        table.setNombre("else");
        EtiquetaEstructura estructuraPadre = PilaControl.get(PilaControl.size()-1);
        parser.codigoIntermedio.add(new GotoInstr(estructuraPadre.getEtiquetaFinal()));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // else_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$7 ::= 
            {
              Object RESULT =null;

    if(ActualTable != null){
        TablaDeSimbolos table = new TablaDeSimbolos(ActualTable, "do_while");
        ActualTable.AgregarHijo(table);
        ActualTable = table;
        String etiquedaInicio = nuevaEtiqueta("do-while_inicio");
        String etiquedaIntermedia = nuevaEtiqueta("do-while_intermedio");
        String etiquetaFin = nuevaEtiqueta("do-while_final");
        parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaInicio));
        parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaIntermedia));
        PilaIteradores.add(new EtiquetaEstructura(etiquedaInicio, etiquedaIntermedia, etiquetaFin));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // do_while_stmt ::= DO NT$7 block WHILE PARENTHESIS_L expr PARENTHESIS_R 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(ActualTable != null && type != null){
        ActualTable = ActualTable.getPadre();
        String[] typeExpr = (String[]) type;
        if(!typeExpr[0].equals("boolean")){
            System.err.println("Error semántico: do-while necesita una " +
                "expresion de tipo booleano para funcionar. En cambio, se " +
                "una expresion de tipo " + typeExpr[0] + ".");
            error_semantic_count++;
        }
        else{
            EtiquetaEstructura iterador = PilaIteradores.get(PilaIteradores.size()-1);
            parser.codigoIntermedio.add(new IfFalseInstr(typeExpr[1], iterador.getEtiquetaFinal()));
            parser.codigoIntermedio.add(new GotoInstr(iterador.getEtiquetaIntermedio()));
            parser.codigoIntermedio.add(new EtiquetaInstr(iterador.getEtiquetaFinal()));
            PilaIteradores.removeLast();
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$8 ::= 
            {
              Object RESULT =null;

    if(ActualTable != null){
        TablaDeSimbolos table = new TablaDeSimbolos(ActualTable, "for");
        ActualTable.AgregarHijo(table);
        ActualTable = table;
        String etiquedaInicio = nuevaEtiqueta("for_inicio");
        String etiquedaIntermedia = nuevaEtiqueta("for_intermedio");
        String etiquetaFin = nuevaEtiqueta("for_final");
        parser.codigoIntermedio.add(new EtiquetaInstr(etiquedaInicio));
        PilaIteradores.add(new EtiquetaEstructura(etiquedaInicio, etiquedaIntermedia, etiquetaFin));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

    if(ActualTable != null){
        EtiquetaEstructura iterador = PilaIteradores.get(PilaIteradores.size()-1);
        parser.codigoIntermedio.add(new EtiquetaInstr(iterador.getEtiquetaIntermedio()));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    if(ActualTable != null && type != null){
        String[] typeAux = (String[]) type;
        EtiquetaEstructura iterador = PilaIteradores.get(PilaIteradores.size()-1);
        parser.codigoIntermedio.add(new IfFalseInstr(typeAux[1], iterador.getEtiquetaFinal()));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_stmt ::= FOR NT$8 PARENTHESIS_L for_assign END_LINE NT$9 expr END_LINE NT$10 assign_stmt PARENTHESIS_R block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    if(ActualTable != null && type != null){
        ActualTable = ActualTable.getPadre();
        String[] typeExpr = (String[]) type;
        if(!typeExpr[0].equals("boolean")){
            System.err.println("Error semántico: for necesita una " +
                "expresion de tipo booleano para en su segundo parámetro para funcionar. En cambio, se " +
                "una expresion de tipo " + typeExpr[0] + ".");
            error_semantic_count++;
        }
        else{
            EtiquetaEstructura iterador = PilaIteradores.get(PilaIteradores.size()-1);
            parser.codigoIntermedio.add(new GotoInstr(iterador.getEtiquetaIntermedio()));
            parser.codigoIntermedio.add(new EtiquetaInstr(iterador.getEtiquetaFinal()));
            PilaIteradores.removeLast();
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // return_stmt ::= RETURN expr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && type != null){
        String[] typeReturn = (String[]) type;
        String valorReturn = typeReturn[1];
        if(!typeReturn[0].equals(ActualFunction.getTipo())){
            System.err.println("Error semántico: El valor retornado " +
                typeReturn[0] + " no corresponde con el tipo de retorno " +
                ActualFunction.getTipo() + " de la funcion " +
                ActualFunction.getNombre() + ".");
            error_semantic_count++;
        }

        // Agregar instruccion intermedia para return
        parser.codigoIntermedio.add(new ReturnInstr(valorReturn));
        ActualTable.agregarInstruccion(new ReturnInstr(valorReturn));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // break_stmt ::= BREAK 
            {
              Object RESULT =null;
		
    if(ActualTable != null){
        TablaDeSimbolos actualTable = ActualTable;
        while (actualTable != null){
            if(ActualTable.getNombre().equals("for")
                || ActualTable.getNombre().equals("do_while"))
                break;
            actualTable = actualTable.getPadre();
        }
        if(actualTable == null){
            System.err.println("Error semántico: El BREAK solo puede utilizarse"
                + " dentro de iteradores for o do-while");
            error_semantic_count++;
        }
        else{
            EtiquetaEstructura iterador = PilaIteradores.get(PilaIteradores.size()-1);
            parser.codigoIntermedio.add(new GotoInstr(iterador.getEtiquetaFinal()));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type ::= simple_type 
            {
              Object RESULT =null;
		int typeStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeString = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = typeString.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= matrix_type 
            {
              Object RESULT =null;
		int typeStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeString = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = typeString.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // simple_type ::= INT 
            {
              Object RESULT =null;
		RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // simple_type ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // simple_type ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // simple_type ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // simple_type ::= STRING 
            {
              Object RESULT =null;
		RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // matrix_type ::= INT_MATRIX 
            {
              Object RESULT =null;
		RESULT = "intMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // matrix_type ::= FLOAT_MATRIX 
            {
              Object RESULT =null;
		RESULT = "floatMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // matrix_type ::= STRING_MATRIX 
            {
              Object RESULT =null;
		RESULT = "stringMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // matrix_type ::= CHAR_MATRIX 
            {
              Object RESULT =null;
		RESULT = "charMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // matrix_type ::= BOOLEAN_MATRIX 
            {
              Object RESULT =null;
		RESULT = "booleanMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comment ::= COMMENT_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comment ::= COMMENT_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // func_call ::= ID PARENTHESIS_L arg_list PARENTHESIS_R 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (ActualTable != null && args != null && name != null) {
        String nameCall = name.toString();
        String argsCall = args.toString();
        if (Functions.containsKey(nameCall)) {
            Function function = Functions.get(nameCall);
            String argsFunction = function.getArguments();
            if (argsFunction.equals(argsCall)) {
                RESULT = new String[]{ function.getTipo(), nameCall + "()" };

                // Generar codigo intermedio para la llamada a funcion
                parser.codigoIntermedio.add(new OperacionInstr("call", nameCall, "", ""));
                ActualTable.agregarInstruccion(new OperacionInstr("call", nameCall, "", ""));
            } else {
                System.err.println("Error semantico: La funcion " + nameCall +
                    " tiene argumentos de tipo |" + argsFunction + "|, pero se enviaron |" +
                    argsCall + "|.");
                RESULT = new String[]{ "error", "" };
            }
        } else {
            System.err.println("Error semantico: No existe la funcion " + nameCall + ".");
            RESULT = new String[]{ "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // func_call ::= ID PARENTHESIS_L PARENTHESIS_R 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if (ActualTable != null && name != null) {
        String nameCall = name.toString();
        String argsCall = "";
        if (Functions.containsKey(nameCall)) {
            Function function = Functions.get(nameCall);
            String argsFunction = function.getArguments();
            if (argsFunction.equals(argsCall)) {
                RESULT = new String[]{ function.getTipo(), nameCall + "()" };

                // Generar codigo intermedio para la llamada a funcion
                parser.codigoIntermedio.add(new OperacionInstr("call", nameCall, "", ""));
                ActualTable.agregarInstruccion(new OperacionInstr("call", nameCall, "", ""));
            } else {
                System.err.println("Error semantico: La funcion " + nameCall +
                    " tiene argumentos de tipo |" + argsFunction + "|, pero se enviaron |" +
                    argsCall + "|.");
                RESULT = new String[]{ "error", "" };
            }
        } else {
            System.err.println("Error semantico: No existe la funcion " + nameCall + ".");
            RESULT = new String[]{ "error", "" };
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arg_list ::= expr COMMA arg_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && type != null && types != null){
        String typesAux = types.toString();
        String[] typeAux = (String[]) type;
        RESULT = typeAux[0] + " " + typesAux;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arg_list ::= expr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && type != null){
        String[] typeAux = (String[]) type;
        RESULT = typeAux[0];

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // write_stmt ::= WRITE_INT INT_LITERAL 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && data != null){
        String dataAux = data.toString();
        parser.codigoIntermedio.add(new OutputInstr("WRITE_INT", nuevoTemporal(), dataAux));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // write_stmt ::= WRITE_INT ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            System.err.println("Error semántico: El identificador " +
                id + " no existe");
            error_semantic_count++;
        }
        else if(!line.getEstaInicializado()){
            System.err.println("No se ha inicializado el identificador " +
                line.getNombre());
            error_semantic_count++;
        }
        else if(!line.getTipo().equals("int")){
            System.err.println("Error semántico: El identificador debe ser"
                + " de tipo entero");
            error_semantic_count++;
        }   
        else{
            parser.codigoIntermedio.add(new OutputInstr("WRITE_INT", nuevoTemporal(), id));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // write_stmt ::= WRITE_FLOAT FLOAT_LITERAL 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && data != null){
        String dataAux = data.toString();
        parser.codigoIntermedio.add(new OutputInstr("WRITE_FLOAT", nuevoTemporal(), dataAux));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // write_stmt ::= WRITE_FLOAT ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            System.err.println("Error semántico: El identificador " +
                id + " no existe");
            error_semantic_count++;
        }
        else if(!line.getEstaInicializado()){
            System.err.println("No se ha inicializado el identificador " +
                line.getNombre());
            error_semantic_count++;
        }
        else if(!line.getTipo().equals("float")){
            System.err.println("Error semántico: El identificador debe ser"
                + " de tipo flotante.");
            error_semantic_count++;
        }
        else {
            parser.codigoIntermedio.add(new OutputInstr("WRITE_FLOAT", nuevoTemporal(), id));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // write_stmt ::= WRITE_STRING STRING_LITERAL 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && data != null){
        String dataAux = data.toString();
        parser.codigoIntermedio.add(new OutputInstr("WRITE_STRING", nuevoTemporal(), dataAux));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // write_stmt ::= WRITE_STRING ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            System.err.println("Error semántico: El identificador " +
                id + " no existe");
            error_semantic_count++;
        }
        else if(!line.getEstaInicializado()){
            System.err.println("No se ha inicializado el identificador " +
                line.getNombre());
            error_semantic_count++;
        }
        else if(!line.getTipo().equals("string")){
            System.err.println("Error semántico: El identificador debe ser"
                + " de tipo string");
            error_semantic_count++;
        }
        else {
            parser.codigoIntermedio.add(new OutputInstr("WRITE_STRING", nuevoTemporal(), id));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // write_stmt ::= WRITE_BOOLEAN BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && data != null){
        String dataAux = data.toString();
        parser.codigoIntermedio.add(new OutputInstr("WRITE_BOOLEAN", nuevoTemporal(), dataAux));
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // write_stmt ::= WRITE_BOOLEAN ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            System.err.println("Error semántico: El identificador " +
                id + " no existe");
            error_semantic_count++;
        }
        else if(!line.getEstaInicializado()){
            System.err.println("No se ha inicializado el identificador " +
                line.getNombre());
            error_semantic_count++;
        }
        else if(!line.getTipo().equals("boolean")){
            System.err.println("Error semántico: El identificador debe ser"
                + " de tipo booleano");
            error_semantic_count++;
        }
        else{
            parser.codigoIntermedio.add(new OutputInstr("WRITE_BOOLEAN", nuevoTemporal(), id));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // read_stmt ::= READ_INT ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            System.err.println("Error semántico: El identificador " +
                id + " no existe");
            error_semantic_count++;
        }
        else if(!line.getEstaInicializado()){
            System.err.println("No se ha inicializado el identificador " +
                line.getNombre() + ".");
            error_semantic_count++;
        }
        else if(!line.getTipo().equals("int")){
            System.err.println("Error semántico: El identificador debe ser"
                + " de tipo entero.");
            error_semantic_count++;
        }
        else{
            parser.codigoIntermedio.add(new InputInstr("READ_INT", nuevoTemporal(), id));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // read_stmt ::= READ_FLOAT ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            System.err.println("Error semántico: El identificador " +
                id + " no existe");
            error_semantic_count++;
        }
        else if(!line.getEstaInicializado()){
            System.err.println("No se ha inicializado el identificador " +
                line.getNombre());
            error_semantic_count++;
        }
        else if(!line.getTipo().equals("float")){
            System.err.println("Error semántico: El identificador debe ser"
                + " de tipo flotante");
            error_semantic_count++;
        }
        else{
            parser.codigoIntermedio.add(new InputInstr("READ_FLOAT", nuevoTemporal(), id));
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
