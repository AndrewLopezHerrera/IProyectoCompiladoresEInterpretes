
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.lexicalanalyzer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collection;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\053" +
    "\002\000\002\003\010\000\002\054\002\000\002\055\002" +
    "\000\002\004\012\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\006\005\000\002" +
    "\006\003\000\002\006\002\000\002\007\004\000\002\056" +
    "\002\000\002\010\006\000\002\011\004\000\002\011\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\046\007\000\002\046\012\000" +
    "\002\046\003\000\002\014\005\000\002\014\013\000\002" +
    "\014\010\000\002\014\004\000\002\014\004\000\002\057" +
    "\002\000\002\015\006\000\002\015\005\000\002\016\003" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\004\000\002\016\004\000\002\047" +
    "\005\000\002\047\004\000\002\050\005\000\002\050\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\004\000" +
    "\002\051\003\000\002\051\003\000\002\052\003\000\002" +
    "\052\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\027\012\000\002" +
    "\026\011\000\002\025\010\000\002\024\007\000\002\030" +
    "\004\000\002\030\003\000\002\031\007\000\002\032\010" +
    "\000\002\033\013\000\002\034\004\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\042\006\000\002\042\005\000\002" +
    "\043\005\000\002\043\003\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\004\000\002\044\004\000\002\044\004\000" +
    "\002\045\004\000\002\045\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\036\003\025\020\006\021\020\022\015\023" +
    "\007\024\016\025\031\026\023\027\024\030\004\031\011" +
    "\074\027\075\022\100\030\001\002\000\010\061\uff93\064" +
    "\uff93\077\uff93\001\002\000\036\003\025\020\006\021\020" +
    "\022\015\023\007\024\016\025\031\026\023\027\024\030" +
    "\004\031\011\074\027\075\022\100\030\001\002\000\004" +
    "\077\uff9b\001\002\000\004\077\uff98\001\002\000\004\077" +
    "\337\001\002\000\010\061\uff92\064\uff92\077\uff92\001\002" +
    "\000\004\002\336\001\002\000\004\002\000\001\002\000" +
    "\004\002\ufff8\001\002\000\004\077\uff99\001\002\000\004" +
    "\077\uff97\001\002\000\004\077\uff9d\001\002\000\004\077" +
    "\uff9a\001\002\000\004\077\uff9c\001\002\000\074\003\uff90" +
    "\011\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\063\uff90\065\uff90\066\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\077\uff90\100\uff90\001\002\000\010\061\uff95\064\uff95\077" +
    "\uff95\001\002\000\010\061\uff94\064\uff94\077\uff94\001\002" +
    "\000\004\002\ufff7\001\002\000\036\003\025\020\006\021" +
    "\020\022\015\023\007\024\016\025\031\026\023\027\024" +
    "\030\004\031\011\074\027\075\022\100\030\001\002\000" +
    "\074\003\uff91\011\uff91\015\uff91\016\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\063\uff91\065\uff91" +
    "\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074" +
    "\uff91\075\uff91\077\uff91\100\uff91\001\002\000\004\076\032" +
    "\001\002\000\010\061\uff96\064\uff96\077\uff96\001\002\000" +
    "\004\057\033\001\002\000\004\060\034\001\002\000\004" +
    "\062\uffff\001\002\000\004\062\037\001\002\000\004\002" +
    "\ufffe\001\002\000\070\003\ufff2\011\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\077\ufff2\001\002\000\070\003\063" +
    "\011\056\015\050\016\101\017\064\020\006\021\020\022" +
    "\015\023\007\024\016\025\031\026\023\027\024\030\004" +
    "\031\011\032\073\033\044\065\071\066\062\067\054\070" +
    "\070\071\043\072\074\073\061\074\027\075\022\077\060" +
    "\001\002\000\074\003\uffaa\011\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\061" +
    "\uffaa\063\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\075\uffaa\077\uffaa\001\002\000" +
    "\074\003\uffa9\011\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\061\uffa9\063\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\077\uffa9\001\002\000\006\007\334" +
    "\077\333\001\002\000\004\077\332\001\002\000\074\003" +
    "\uffad\011\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\061\uffad\063\uffad\065\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\077\uffad\001\002\000\006\061\331\064\uffd8" +
    "\001\002\000\006\061\330\064\312\001\002\000\004\057" +
    "\303\001\002\000\004\061\302\001\002\000\010\061\uffde" +
    "\064\uffde\077\uff9c\001\002\000\004\061\301\001\002\000" +
    "\006\004\300\077\277\001\002\000\004\061\276\001\002" +
    "\000\004\057\256\001\002\000\004\061\255\001\002\000" +
    "\010\054\241\057\176\064\242\001\002\000\032\004\123" +
    "\005\131\006\114\007\122\010\125\032\111\033\130\036" +
    "\115\044\127\053\121\057\110\077\117\001\002\000\004" +
    "\077\237\001\002\000\004\061\236\001\002\000\004\061" +
    "\uff9e\001\002\000\004\061\235\001\002\000\004\063\234" +
    "\001\002\000\072\003\uffe3\011\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\063" +
    "\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3" +
    "\073\uffe3\074\uffe3\075\uffe3\077\uffe3\001\002\000\006\005" +
    "\233\077\232\001\002\000\004\077\231\001\002\000\074" +
    "\003\uffac\011\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\061\uffac\063\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\077\uffac\001\002\000\004\077\230\001" +
    "\002\000\006\006\227\077\226\001\002\000\074\003\uffab" +
    "\011\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\061\uffab\063\uffab\065\uffab\066" +
    "\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab" +
    "\075\uffab\077\uffab\001\002\000\004\061\225\001\002\000" +
    "\074\003\uffea\011\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\061\224\063\uffea" +
    "\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073" +
    "\uffea\074\uffea\075\uffea\077\uffea\001\002\000\074\003\uffae" +
    "\011\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\061\uffae\063\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\077\uffae\001\002\000\004\062\037\001\002\000" +
    "\072\003\063\011\056\015\050\016\101\017\064\020\006" +
    "\021\020\022\015\023\007\024\016\025\031\026\023\027" +
    "\024\030\004\031\011\032\073\033\044\063\uffef\065\071" +
    "\066\062\067\054\070\070\071\043\072\074\073\061\074" +
    "\027\075\022\077\060\001\002\000\004\061\215\001\002" +
    "\000\004\077\105\001\002\000\010\054\106\061\uffe1\064" +
    "\uffe1\001\002\000\032\004\123\005\131\006\114\007\122" +
    "\010\125\032\111\033\130\036\115\044\127\053\121\057" +
    "\110\077\117\001\002\000\046\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\055\uffd1\056\uffd1" +
    "\060\uffd1\061\uffd1\001\002\000\032\004\123\005\131\006" +
    "\114\007\122\010\125\032\111\033\130\036\115\044\127" +
    "\053\121\057\110\077\117\001\002\000\004\077\212\001" +
    "\002\000\040\034\145\035\142\036\146\037\151\040\144" +
    "\041\134\042\143\043\150\045\137\046\136\047\140\050" +
    "\147\051\135\052\141\055\206\001\002\000\046\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\055\uffd0\056\uffd0\060\uffd0\061\uffd0\001\002\000\046\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\001\002\000\032" +
    "\004\123\005\131\006\114\007\122\010\125\032\111\033" +
    "\130\036\115\044\127\053\121\057\110\077\117\001\002" +
    "\000\046\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\055\uffd2\056\uffd2\060\uffd2\061\uffd2\001" +
    "\002\000\050\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\055\uffce\056\uffce\057\176\060\uffce" +
    "\061\uffce\001\002\000\046\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\055\uffd3\056\uffd3\060" +
    "\uffd3\061\uffd3\001\002\000\006\004\171\053\170\001\002" +
    "\000\046\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\001" +
    "\002\000\046\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf" +
    "\001\002\000\046\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\055\uffd5\056\uffd5\060\uffd5\061" +
    "\uffd5\001\002\000\046\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\055\uffb1\056\uffb1\060\uffb1" +
    "\061\uffb1\001\002\000\046\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\056\uffcf\060" +
    "\uffcf\061\uffcf\001\002\000\032\004\123\005\131\006\114" +
    "\007\122\010\125\032\111\033\130\036\115\044\127\053" +
    "\121\057\110\077\117\001\002\000\004\077\132\001\002" +
    "\000\046\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0\001" +
    "\002\000\046\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc" +
    "\001\002\000\046\034\145\035\142\036\146\037\151\040" +
    "\144\041\134\042\143\043\150\045\137\046\136\047\140" +
    "\050\147\051\135\052\141\055\uffb8\056\uffb8\060\uffb8\061" +
    "\uffb8\001\002\000\032\004\123\005\131\006\114\007\122" +
    "\010\125\032\111\033\130\036\115\044\127\053\121\057" +
    "\110\077\117\001\002\000\032\004\123\005\131\006\114" +
    "\007\122\010\125\032\111\033\130\036\115\044\127\053" +
    "\121\057\110\077\117\001\002\000\032\004\123\005\131" +
    "\006\114\007\122\010\125\032\111\033\130\036\115\044" +
    "\127\053\121\057\110\077\117\001\002\000\032\004\123" +
    "\005\131\006\114\007\122\010\125\032\111\033\130\036" +
    "\115\044\127\053\121\057\110\077\117\001\002\000\032" +
    "\004\123\005\131\006\114\007\122\010\125\032\111\033" +
    "\130\036\115\044\127\053\121\057\110\077\117\001\002" +
    "\000\032\004\123\005\131\006\114\007\122\010\125\032" +
    "\111\033\130\036\115\044\127\053\121\057\110\077\117" +
    "\001\002\000\032\004\123\005\131\006\114\007\122\010" +
    "\125\032\111\033\130\036\115\044\127\053\121\057\110" +
    "\077\117\001\002\000\032\004\123\005\131\006\114\007" +
    "\122\010\125\032\111\033\130\036\115\044\127\053\121" +
    "\057\110\077\117\001\002\000\032\004\123\005\131\006" +
    "\114\007\122\010\125\032\111\033\130\036\115\044\127" +
    "\053\121\057\110\077\117\001\002\000\032\004\123\005" +
    "\131\006\114\007\122\010\125\032\111\033\130\036\115" +
    "\044\127\053\121\057\110\077\117\001\002\000\032\004" +
    "\123\005\131\006\114\007\122\010\125\032\111\033\130" +
    "\036\115\044\127\053\121\057\110\077\117\001\002\000" +
    "\032\004\123\005\131\006\114\007\122\010\125\032\111" +
    "\033\130\036\115\044\127\053\121\057\110\077\117\001" +
    "\002\000\032\004\123\005\131\006\114\007\122\010\125" +
    "\032\111\033\130\036\115\044\127\053\121\057\110\077" +
    "\117\001\002\000\032\004\123\005\131\006\114\007\122" +
    "\010\125\032\111\033\130\036\115\044\127\053\121\057" +
    "\110\077\117\001\002\000\046\034\145\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\143\043\150\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\055\uffc4\056\uffc4" +
    "\060\uffc4\061\uffc4\001\002\000\046\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\055\uffb9\056" +
    "\uffb9\060\uffb9\061\uffb9\001\002\000\046\034\145\035\142" +
    "\036\146\037\151\040\144\041\134\042\143\043\150\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\055\uffc0" +
    "\056\uffc0\060\uffc0\061\uffc0\001\002\000\046\034\145\035" +
    "\uffc6\036\uffc6\037\151\040\144\041\134\042\143\043\150" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\055" +
    "\uffc6\056\uffc6\060\uffc6\061\uffc6\001\002\000\046\034\145" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\143\043" +
    "\150\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\055\uffc3\056\uffc3\060\uffc3\061\uffc3\001\002\000\046\034" +
    "\145\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\143" +
    "\043\150\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\001\002\000\046" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\055\uffba\056\uffba\060\uffba\061\uffba\001\002\000" +
    "\046\034\145\035\uffc7\036\uffc7\037\151\040\144\041\134" +
    "\042\143\043\150\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\001\002" +
    "\000\046\034\145\035\142\036\146\037\151\040\144\041" +
    "\134\042\143\043\150\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe\001" +
    "\002\000\046\034\145\035\142\036\146\037\151\040\144" +
    "\041\134\042\143\043\150\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\055\uffbf\056\uffbf\060\uffbf\061\uffbf" +
    "\001\002\000\046\034\145\035\142\036\146\037\151\040" +
    "\144\041\134\042\143\043\150\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\055\uffbc\056\uffbc\060\uffbc\061" +
    "\uffbc\001\002\000\046\034\145\035\142\036\146\037\151" +
    "\040\144\041\134\042\143\043\150\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\055\uffbb\056\uffbb\060\uffbb" +
    "\061\uffbb\001\002\000\046\034\145\035\142\036\146\037" +
    "\151\040\144\041\134\042\143\043\150\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\060" +
    "\uffbd\061\uffbd\001\002\000\046\034\145\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\143\043\150\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\055\uffc2\056\uffc2" +
    "\060\uffc2\061\uffc2\001\002\000\046\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\055\uffca\056" +
    "\uffca\060\uffca\061\uffca\001\002\000\006\053\uffc8\056\174" +
    "\001\002\000\004\053\173\001\002\000\046\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\055" +
    "\uffcb\056\uffcb\060\uffcb\061\uffcb\001\002\000\004\004\171" +
    "\001\002\000\004\053\uffc9\001\002\000\034\004\123\005" +
    "\131\006\114\007\122\010\125\032\111\033\130\036\115" +
    "\044\127\053\121\057\110\060\201\077\117\001\002\000" +
    "\042\034\145\035\142\036\146\037\151\040\144\041\134" +
    "\042\143\043\150\045\137\046\136\047\140\050\147\051" +
    "\135\052\141\056\203\060\uff8c\001\002\000\004\060\202" +
    "\001\002\000\046\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\055\uff8e\056\uff8e\060\uff8e\061" +
    "\uff8e\001\002\000\046\034\uff8f\035\uff8f\036\uff8f\037\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\043\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\055\uff8f\056\uff8f\060\uff8f" +
    "\061\uff8f\001\002\000\032\004\123\005\131\006\114\007" +
    "\122\010\125\032\111\033\130\036\115\044\127\053\121" +
    "\057\110\077\117\001\002\000\004\060\uff8d\001\002\000" +
    "\046\034\145\035\uffc1\036\uffc1\037\151\040\144\041\134" +
    "\042\143\043\150\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\001\002" +
    "\000\010\054\207\061\uffe0\064\uffe0\001\002\000\032\004" +
    "\123\005\131\006\114\007\122\010\125\032\111\033\130" +
    "\036\115\044\127\053\121\057\110\077\117\001\002\000" +
    "\040\034\145\035\142\036\146\037\151\040\144\041\134" +
    "\042\143\043\150\045\137\046\136\047\140\050\147\051" +
    "\135\052\141\055\211\001\002\000\006\061\uffdf\064\uffdf" +
    "\001\002\000\046\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\055\uffcd\056\uffcd\060\uffcd\061" +
    "\uffcd\001\002\000\040\034\145\035\142\036\146\037\151" +
    "\040\144\041\134\042\143\043\150\045\137\046\136\047" +
    "\140\050\147\051\135\052\141\060\214\001\002\000\046" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\001\002\000" +
    "\072\003\uffe4\011\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\063\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\077\uffe4\001\002\000\004\063\ufff0\001\002" +
    "\000\004\014\220\001\002\000\004\057\221\001\002\000" +
    "\032\004\123\005\131\006\114\007\122\010\125\032\111" +
    "\033\130\036\115\044\127\053\121\057\110\077\117\001" +
    "\002\000\040\034\145\035\142\036\146\037\151\040\144" +
    "\041\134\042\143\043\150\045\137\046\136\047\140\050" +
    "\147\051\135\052\141\060\223\001\002\000\074\003\uffa1" +
    "\011\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\061\uffa1\063\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\077\uffa1\001\002\000\072\003\uffeb\011\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\063\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\077\uffeb\001" +
    "\002\000\072\003\uffe8\011\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\063\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\077\uffe8\001\002\000\004\061\uff84" +
    "\001\002\000\004\061\uff85\001\002\000\006\060\uffda\061" +
    "\uffda\001\002\000\004\061\uff83\001\002\000\004\061\uff88" +
    "\001\002\000\004\061\uff89\001\002\000\106\002\ufff1\003" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\061\ufff1\063\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\077\ufff1\100\ufff1" +
    "\001\002\000\072\003\uffec\011\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\063" +
    "\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec" +
    "\073\uffec\074\uffec\075\uffec\077\uffec\001\002\000\072\003" +
    "\uffe2\011\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\063\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\077\uffe2\001\002\000\004\061\uff82\001\002\000\040" +
    "\034\145\035\142\036\146\037\151\040\144\041\134\042" +
    "\143\043\150\045\137\046\136\047\140\050\147\051\135" +
    "\052\141\061\uff9f\001\002\000\032\004\123\005\131\006" +
    "\114\007\122\010\125\032\111\033\130\036\115\044\127" +
    "\053\121\057\110\077\117\001\002\000\032\004\123\005" +
    "\131\006\114\007\122\010\125\032\111\033\130\036\115" +
    "\044\127\053\121\057\110\077\117\001\002\000\042\034" +
    "\145\035\142\036\146\037\151\040\144\041\134\042\143" +
    "\043\150\045\137\046\136\047\140\050\147\051\135\052" +
    "\141\060\uffdd\061\uffdd\001\002\000\040\034\145\035\142" +
    "\036\146\037\151\040\144\041\134\042\143\043\150\045" +
    "\137\046\136\047\140\050\147\051\135\052\141\055\245" +
    "\001\002\000\006\054\246\064\247\001\002\000\032\004" +
    "\123\005\131\006\114\007\122\010\125\032\111\033\130" +
    "\036\115\044\127\053\121\057\110\077\117\001\002\000" +
    "\032\004\123\005\131\006\114\007\122\010\125\032\111" +
    "\033\130\036\115\044\127\053\121\057\110\077\117\001" +
    "\002\000\042\034\145\035\142\036\146\037\151\040\144" +
    "\041\134\042\143\043\150\045\137\046\136\047\140\050" +
    "\147\051\135\052\141\060\uffdb\061\uffdb\001\002\000\040" +
    "\034\145\035\142\036\146\037\151\040\144\041\134\042" +
    "\143\043\150\045\137\046\136\047\140\050\147\051\135" +
    "\052\141\055\252\001\002\000\004\064\253\001\002\000" +
    "\032\004\123\005\131\006\114\007\122\010\125\032\111" +
    "\033\130\036\115\044\127\053\121\057\110\077\117\001" +
    "\002\000\042\034\145\035\142\036\146\037\151\040\144" +
    "\041\134\042\143\043\150\045\137\046\136\047\140\050" +
    "\147\051\135\052\141\060\uffdc\061\uffdc\001\002\000\072" +
    "\003\uffed\011\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\063\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\075\uffed\077\uffed\001\002\000\032\004\123\005\131\006" +
    "\114\007\122\010\125\032\111\033\130\036\115\044\127" +
    "\053\121\057\110\077\117\001\002\000\040\034\145\035" +
    "\142\036\146\037\151\040\144\041\134\042\143\043\150" +
    "\045\137\046\136\047\140\050\147\051\135\052\141\060" +
    "\260\001\002\000\004\062\037\001\002\000\100\003\uffa5" +
    "\011\uffa5\012\263\013\262\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\061\uffa5\063" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\075\uffa5\077\uffa5\001\002\000\004\062" +
    "\037\001\002\000\004\057\271\001\002\000\076\003\uffa6" +
    "\011\uffa6\013\267\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\061\uffa6\063\uffa6\065" +
    "\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\074\uffa6\075\uffa6\077\uffa6\001\002\000\100\003\uffa3\011" +
    "\uffa3\012\263\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\061\uffa3\063\uffa3" +
    "\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\077\uffa3\001\002\000\076\003\uffa4" +
    "\011\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\061\uffa4\063\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\077\uffa4\001\002\000\004\062\037\001" +
    "\002\000\074\003\uffa8\011\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\061\uffa8" +
    "\063\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072" +
    "\uffa8\073\uffa8\074\uffa8\075\uffa8\077\uffa8\001\002\000\032" +
    "\004\123\005\131\006\114\007\122\010\125\032\111\033" +
    "\130\036\115\044\127\053\121\057\110\077\117\001\002" +
    "\000\040\034\145\035\142\036\146\037\151\040\144\041" +
    "\134\042\143\043\150\045\137\046\136\047\140\050\147" +
    "\051\135\052\141\060\273\001\002\000\004\062\037\001" +
    "\002\000\100\003\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\061\uffa2\063\uffa2\065\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\077\uffa2" +
    "\001\002\000\074\003\uffa7\011\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\061" +
    "\uffa7\063\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\072\uffa7\073\uffa7\074\uffa7\075\uffa7\077\uffa7\001\002\000" +
    "\072\003\uffe7\011\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\063\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074" +
    "\uffe7\075\uffe7\077\uffe7\001\002\000\004\061\uff8a\001\002" +
    "\000\004\061\uff8b\001\002\000\072\003\uffe9\011\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\063\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\077\uffe9\001" +
    "\002\000\072\003\uffe6\011\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\063\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\077\uffe6\001\002\000\034\020\006" +
    "\021\020\022\015\023\007\024\016\025\031\026\023\027" +
    "\024\030\004\031\011\032\073\033\044\077\304\001\002" +
    "\000\006\054\241\064\242\001\002\000\004\064\uffd8\001" +
    "\002\000\004\061\314\001\002\000\004\061\uffb4\001\002" +
    "\000\004\064\312\001\002\000\004\061\uffb5\001\002\000" +
    "\032\004\123\005\131\006\114\007\122\010\125\032\111" +
    "\033\130\036\115\044\127\053\121\057\110\077\117\001" +
    "\002\000\040\034\145\035\142\036\146\037\151\040\144" +
    "\041\134\042\143\043\150\045\137\046\136\047\140\050" +
    "\147\051\135\052\141\061\uffd6\001\002\000\032\004\123" +
    "\005\131\006\114\007\122\010\125\032\111\033\130\036" +
    "\115\044\127\053\121\057\110\077\117\001\002\000\040" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\061\uffb7\001\002\000\036\034\145\035\142\036" +
    "\146\037\151\040\144\041\134\042\143\043\150\045\137" +
    "\046\136\047\140\050\147\051\135\052\141\001\002\000" +
    "\040\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\061\uffb6\001\002\000\004\061\321\001\002" +
    "\000\010\032\073\033\044\077\304\001\002\000\004\060" +
    "\323\001\002\000\004\062\037\001\002\000\074\003\uffa0" +
    "\011\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\061\uffa0\063\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0" +
    "\075\uffa0\077\uffa0\001\002\000\004\064\326\001\002\000" +
    "\032\004\123\005\131\006\114\007\122\010\125\032\111" +
    "\033\130\036\115\044\127\053\121\057\110\077\117\001" +
    "\002\000\040\034\145\035\142\036\146\037\151\040\144" +
    "\041\134\042\143\043\150\045\137\046\136\047\140\050" +
    "\147\051\135\052\141\061\uffd7\001\002\000\072\003\uffe5" +
    "\011\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\063\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\077\uffe5\001\002\000\072\003\uffee\011\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\063\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\077\uffee\001\002\000" +
    "\006\060\uffd9\061\uffd9\001\002\000\004\061\uff86\001\002" +
    "\000\004\061\uff87\001\002\000\004\002\ufffa\001\002\000" +
    "\004\002\001\001\002\000\004\057\ufffd\001\002\000\004" +
    "\057\341\001\002\000\030\020\006\021\020\022\015\023" +
    "\007\024\016\025\031\026\023\027\024\030\004\031\011" +
    "\060\ufff4\001\002\000\006\056\351\060\ufff5\001\002\000" +
    "\004\077\350\001\002\000\004\060\345\001\002\000\004" +
    "\062\ufffc\001\002\000\004\062\037\001\002\000\036\003" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\074\ufffb\075\ufffb\100" +
    "\ufffb\001\002\000\006\056\ufff3\060\ufff3\001\002\000\030" +
    "\020\006\021\020\022\015\023\007\024\016\025\031\026" +
    "\023\027\024\030\004\031\011\060\ufff4\001\002\000\004" +
    "\060\ufff6\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\022\002\011\003\013\004\025\005\012\036" +
    "\007\037\016\040\020\041\004\001\001\000\002\001\001" +
    "\000\020\003\013\004\025\005\352\036\007\037\016\040" +
    "\020\041\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\013\004\025\005\334\036" +
    "\007\037\016\040\020\041\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\034\001\001\000\004\010\035" +
    "\001\001\000\002\001\001\000\004\056\037\001\001\000" +
    "\056\011\065\012\101\013\045\014\056\015\064\023\076" +
    "\024\074\025\044\026\071\027\077\032\040\033\041\034" +
    "\054\035\050\036\103\037\016\040\051\041\066\042\102" +
    "\044\075\045\052\046\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\237" +
    "\017\117\020\115\021\106\022\125\042\123\047\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\216" +
    "\001\001\000\056\011\215\012\101\013\045\014\056\015" +
    "\064\023\076\024\074\025\044\026\071\027\077\032\040" +
    "\033\041\034\054\035\050\036\103\037\016\040\051\041" +
    "\066\042\102\044\075\045\052\046\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\111\017\117\020\115\021\106\022\125\042\123\047\112" +
    "\001\001\000\002\001\001\000\020\016\212\017\117\020" +
    "\115\021\106\022\125\042\123\047\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\204\017\117\020\115\021\106\022\125" +
    "\042\123\047\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\132\017\117\020\115" +
    "\021\106\022\125\042\123\047\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\166\017\117\020\115\021\106\022\125\042" +
    "\123\047\112\001\001\000\020\016\165\017\117\020\115" +
    "\021\106\022\125\042\123\047\112\001\001\000\020\016" +
    "\164\017\117\020\115\021\106\022\125\042\123\047\112" +
    "\001\001\000\020\016\163\017\117\020\115\021\106\022" +
    "\125\042\123\047\112\001\001\000\020\016\162\017\117" +
    "\020\115\021\106\022\125\042\123\047\112\001\001\000" +
    "\020\016\161\017\117\020\115\021\106\022\125\042\123" +
    "\047\112\001\001\000\020\016\160\017\117\020\115\021" +
    "\106\022\125\042\123\047\112\001\001\000\020\016\157" +
    "\017\117\020\115\021\106\022\125\042\123\047\112\001" +
    "\001\000\020\016\156\017\117\020\115\021\106\022\125" +
    "\042\123\047\112\001\001\000\020\016\155\017\117\020" +
    "\115\021\106\022\125\042\123\047\112\001\001\000\020" +
    "\016\154\017\117\020\115\021\106\022\125\042\123\047" +
    "\112\001\001\000\020\016\153\017\117\020\115\021\106" +
    "\022\125\042\123\047\112\001\001\000\020\016\152\017" +
    "\117\020\115\021\106\022\125\042\123\047\112\001\001" +
    "\000\020\016\151\017\117\020\115\021\106\022\125\042" +
    "\123\047\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\174\001\001\000\002\001\001\000\022\016\176" +
    "\017\117\020\115\021\106\022\125\042\123\043\177\047" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\176\017\117\020" +
    "\115\021\106\022\125\042\123\043\203\047\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\207\017\117\020\115\021\106\022\125\042\123" +
    "\047\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\221\017\117\020\115\021\106\022\125" +
    "\042\123\047\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\243\017\117\020\115\021\106\022\125" +
    "\042\123\047\112\001\001\000\020\016\242\017\117\020" +
    "\115\021\106\022\125\042\123\047\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\250\017\117\020\115\021\106\022\125\042\123\047\112" +
    "\001\001\000\020\016\247\017\117\020\115\021\106\022" +
    "\125\042\123\047\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\253\017\117\020" +
    "\115\021\106\022\125\042\123\047\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\256\017\117\020" +
    "\115\021\106\022\125\042\123\047\112\001\001\000\002" +
    "\001\001\000\004\010\260\001\001\000\006\030\263\031" +
    "\264\001\001\000\004\010\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\265\031\264\001\001\000" +
    "\002\001\001\000\004\010\267\001\001\000\002\001\001" +
    "\000\020\016\271\017\117\020\115\021\106\022\125\042" +
    "\123\047\112\001\001\000\002\001\001\000\004\010\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\304\014\310\015\306\036" +
    "\103\037\016\040\051\046\307\052\305\001\001\000\002" +
    "\001\001\000\004\057\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\312\017\117\020\115\021\106\022\125\042\123\047" +
    "\112\001\001\000\002\001\001\000\022\016\315\017\117" +
    "\020\316\021\314\022\125\042\123\047\112\051\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\321\001\001\000\002\001" +
    "\001\000\004\010\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\326\017\117\020\115\021\106\022" +
    "\125\042\123\047\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\337\001\001\000\002\001\001\000\014\006" +
    "\343\007\341\036\342\037\016\040\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\345\001\001\000\004\010\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\351\007\341\036\342\037" +
    "\016\040\020\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int error_count = 0;
    public int error_semantic_count = 0;
    private Map<String, Function> Functions = new HashMap<>() ;
    private Map<String, TablaDeSimbolos> FunctionTables = new HashMap<>() ;
    private TablaDeSimbolos ActualTable = null;

    // Modificar para que reporte todos los errores
    public void syntax_error(Symbol s) {
        if (s != null) {
            System.out.println("Error sintáctico en la línea " +(s.left + 1) +
            ", columna " + (s.right + 1) + ": " + s.value);
        }
        error_count++;
    }

    public void report_fatal_error(String message, Object info) {
        System.err.println(">>> Error FATAL de análisis sintáctico: " + message);
    }

    public void createFunction(String pTypeReturn, String pName, int pRow, int pColumn){
        if(Functions.containsKey(pName)){
            ActualTable = null;
            System.err.println("Error semántico: La función " + pName + 
                " está duplicada");
            error_semantic_count++;
        }
        else{
            Function function = new Function(pTypeReturn, pName, pRow, pColumn, true);
            Functions.put(pName, function);
            TablaDeSimbolos table = new TablaDeSimbolos(null);
            FunctionTables.put(pName, table);
            ActualTable = table;
        }
    }

    public LineaTabla createVar(String pTypeReturn, String pName, int pRow,
        int pColumn, boolean pInitialized){
        LineaTabla line = new LineaTabla(pTypeReturn, pName, pRow,pColumn, pInitialized);
        if(!ActualTable.AgregarDato(line)){
            System.err.println("Error semántico: La función " + pName + 
                " está duplicada");
            return null;
        }
        return line;
    }

    public void printTables(){
        System.out.println(Functions.toString() + "\n");
        Collection<TablaDeSimbolos> tables = FunctionTables.values();
        for (TablaDeSimbolos table : tables){
            System.out.println(table.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= func_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;

    int row = 0;
    int column = 0;
    createFunction("void", "main", row, column);
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_func ::= VOID MAIN PARENTHESIS_L PARENTHESIS_R NT$0 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_func",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeFunction = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    if(typeFunction != null && name != null){
        String nameFunction = name.toString();
        String type = typeFunction.toString();
        int row = 0;
        int column = 0;
        createFunction(type, nameFunction, row, column);
        RESULT = null;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object typeFunction = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    if(params != null){
        String paramsFunction = params.toString();
        String nameFunction = name.toString();
        Function function = Functions.get(nameFunction);
        function.setArguments(paramsFunction);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_decl ::= type ID NT$1 PARENTHESIS_L param_list PARENTHESIS_R NT$2 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object typeFunction = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_list ::= func_decl func_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_list ::= comment func_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_list ::= main_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_list ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_list ::= param COMMA param_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null && typeList != null){
        String types = typeList.toString();
        String typeVar = type.toString();
        RESULT = typeVar + " " + types;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_list ::= param 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param ::= type ID 
            {
              Object RESULT =null;
		int typeVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && typeVar != null && name != null){
        String nameVar = name.toString();
        String type = typeVar.toString();
        int row = 0;
        int column = 0;
        createVar(type, nameVar, row, column, true);
        RESULT = type;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;

    if(ActualTable != null){
        TablaDeSimbolos table = new TablaDeSimbolos(ActualTable);
        ActualTable.AgregarHijo(table);
        ActualTable = table;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block ::= OPEN_BLOCK NT$3 stmt_list CLOSE_BLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if(ActualTable != null)
        ActualTable = ActualTable.getPadre();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= var_decl END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= assign_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= var_decl_asisgn_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= control_struct END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= control_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= read_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= write_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= return_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= break_stmt END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= array_decl END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= func_call END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= comment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= error END_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_decl ::= type ID 
            {
              Object RESULT =null;
		int typeVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && typeVar != null && name != null){
        String nameFunction = typeVar.toString();
        String type = name.toString();
        int row = 0;
        int column = 0;
        RESULT = createVar(nameFunction, type, row, column, false);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_decl ::= type ID LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_decl ::= type ID LBRACKET expr RBRACKET LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // array_decl ::= matrix_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign_stmt ::= ID ASSIGN expr 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign_stmt ::= ID LBRACKET expr RBRACKET LBRACKET expr RBRACKET ASSIGN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_stmt ::= ID LBRACKET expr RBRACKET ASSIGN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_stmt ::= ADDITION_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
        else{
            if(!line.getTipo().equals("int")){
                System.err.println("No se permite el uso del ++ con el tipo " +
                    line.getTipo() + " en el identificador " + line.getNombre());
                error_semantic_count++;
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assign_stmt ::= SUBTRACT_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
        else{
            if(!line.getTipo().equals("int")){
                System.err.println("No se permite el uso del -- con el tipo " +
                    line.getTipo() + " en el identificador " + line.getNombre());
                error_semantic_count++;
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$4 ::= 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    if(ActualTable != null && var != null){
        LineaTabla varLine = (LineaTabla) var;
        if(varLine != null && !ActualTable.setInicializacionDato(varLine.getNombre(), true))
            System.out.println(varLine.getNombre() + " no existe en la linea " +
                varLine.getFila() + " y columna " + varLine.getColumna());
    }
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_decl_asisgn_stmt ::= var_decl NT$4 ASSIGN expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_asisgn_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_decl_asisgn_stmt ::= array_decl ASSIGN expr 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if(ActualTable != null && array != null){
        LineaTabla varLine = (LineaTabla) array;
        if(varLine != null && !ActualTable.setInicializacionDato(varLine.getNombre(), true))
            System.out.println(varLine.getNombre() + " no existe en la linea " +
                varLine.getFila() + " y columna " + varLine.getColumna());
    }
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_asisgn_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= PARENTHESIS_L expr PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= logic_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= array_int_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= literal 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(type != null)
        RESULT = type.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= ID 
            {
              Object RESULT =null;
		int idDeclaratedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idDeclaratedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idDeclarated = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && idDeclarated != null){
        String id = idDeclarated.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
        RESULT = line.getTipo();
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= ADDITION_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
        else{
            if(!line.getTipo().equals("int")){
                System.err.println("No se permite el uso del ++ con el tipo " +
                    line.getTipo() + " en el identificador " + line.getNombre());
                error_semantic_count++;
            }
            else{
                RESULT = line.getTipo();
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= SUBTRACT_ONE ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && name != null){
        String id = name.toString();
        LineaTabla line = ActualTable.BuscarDato(id);
        if(line == null){
            error_semantic_count++;
            System.err.println("El identificador " + id + " no existe");
        }
        else{
            if(!line.getTipo().equals("int")){
                System.err.println("No se permite el uso del -- con el tipo " +
                    line.getTipo() + " en el identificador " + line.getNombre());
                error_semantic_count++;
            }
            else{
                RESULT = line.getTipo();
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // array_int_expr ::= BRACKET array_int_expr_list BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // array_int_expr ::= BRACKET BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // array_int_expr_list ::= INT_LITERAL COMMA array_int_expr_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // array_int_expr_list ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_int_expr_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arith_expr ::= expr ADDITION expr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arith_expr ::= expr SUBTRACT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arith_expr ::= expr DIVISION expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arith_expr ::= expr MULTIPLICATION expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arith_expr ::= expr POWERS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arith_expr ::= expr MODULE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arith_expr ::= SUBTRACT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rel_expr ::= expr LT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rel_expr ::= expr LE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rel_expr ::= expr GT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rel_expr ::= expr GE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rel_expr ::= expr EQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rel_expr ::= expr NEQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logic_expr ::= expr CONJUNCTION expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logic_expr ::= expr DISJUNCTION expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logic_expr ::= DENIAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // for_expr ::= logic_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for_expr ::= rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_assign ::= assign_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_assign ::= var_decl_asisgn_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		RESULT = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // control_struct ::= if_elif_else_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // control_struct ::= if_elif_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // control_struct ::= if_else_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // control_struct ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // control_struct ::= do_while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // control_struct ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_struct",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_elif_else_stmt ::= IF PARENTHESIS_L expr PARENTHESIS_R block elif_blocks ELSE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_elif_else_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if_else_stmt ::= IF PARENTHESIS_L expr PARENTHESIS_R block ELSE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_elif_stmt ::= IF PARENTHESIS_L expr PARENTHESIS_R block elif_blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_elif_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // if_stmt ::= IF PARENTHESIS_L expr PARENTHESIS_R block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // elif_blocks ::= elif_block elif_blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_blocks",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // elif_blocks ::= elif_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_blocks",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // elif_block ::= ELIF PARENTHESIS_L expr PARENTHESIS_R block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_block",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // do_while_stmt ::= DO block WHILE PARENTHESIS_L expr PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_stmt ::= FOR PARENTHESIS_L for_assign END_LINE for_expr END_LINE assign_stmt PARENTHESIS_R block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // return_stmt ::= RETURN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // break_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type ::= simple_type 
            {
              Object RESULT =null;
		int typeStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeString = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = typeString.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type ::= matrix_type 
            {
              Object RESULT =null;
		int typeStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeString = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = typeString.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // simple_type ::= INT 
            {
              Object RESULT =null;
		RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // simple_type ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // simple_type ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // simple_type ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // simple_type ::= STRING 
            {
              Object RESULT =null;
		RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // matrix_type ::= INT_MATRIX 
            {
              Object RESULT =null;
		RESULT = "intMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // matrix_type ::= FLOAT_MATRIX 
            {
              Object RESULT =null;
		RESULT = "floatMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // matrix_type ::= STRING_MATRIX 
            {
              Object RESULT =null;
		RESULT = "stringMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // matrix_type ::= CHAR_MATRIX 
            {
              Object RESULT =null;
		RESULT = "charMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // matrix_type ::= BOOLEAN_MATRIX 
            {
              Object RESULT =null;
		RESULT = "booleanMatrix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comment ::= COMMENT_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comment ::= COMMENT_LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // func_call ::= ID PARENTHESIS_L arg_list PARENTHESIS_R 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(ActualTable != null && args != null && name != null){
        String nameCall = name.toString();
        String argsCall = args.toString();
        if(Functions.containsKey(nameCall)){
            Function function = Functions.get(nameCall);
            String argsFunction = function.getArguments();
            if(argsFunction.equals(argsCall)){
                RESULT = function.getTipo();
            }
            else{
                System.err.println("Error semántico: La función " + nameCall +
                    " tiene argumentos de tipo |" + argsFunction + "|, en " +
                    " cambio, se enviaron argumentos de tipo |" + argsCall + 
                    "|.");
            }
        }
        else{
            System.err.println("No existe la función " + nameCall + ".");
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // func_call ::= ID PARENTHESIS_L PARENTHESIS_R 
            {
              Object RESULT =null;
		int nameFuncArgsEmptyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameFuncArgsEmptyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameFuncArgsEmpty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if(ActualTable != null && nameFuncArgsEmpty != null){
        String nameCall = nameFuncArgsEmpty.toString();
        String argsCall = "";
        if(Functions.containsKey(nameCall)){
            Function function = Functions.get(nameCall);
            String argsFunction = function.getArguments();
            if(argsFunction.equals(argsCall)){
                RESULT = function.getTipo();
            }
            else{
                System.err.println("Error semántico: La función " + nameCall +
                    " tiene argumentos de tipo |" + argsFunction + "|, en " +
                    " cambio, se enviaron argumentos de tipo |" + argsCall + 
                    "|.");
            }
        }
        else{
            System.err.println("No existe la función " + nameCall + ".");
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // arg_list ::= expr COMMA arg_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && type != null && types != null){
        String typesAux = types.toString();
        String typeAux = type.toString();
        RESULT = typeAux + " " + typesAux;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arg_list ::= expr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(ActualTable != null && type != null){
        RESULT = type.toString();
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // write_stmt ::= WRITE_INT INT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // write_stmt ::= WRITE_INT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // write_stmt ::= WRITE_FLOAT FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // write_stmt ::= WRITE_FLOAT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // write_stmt ::= WRITE_STRING STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // write_stmt ::= WRITE_STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // write_stmt ::= WRITE_BOOLEAN BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // write_stmt ::= WRITE_BOOLEAN ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // read_stmt ::= READ_INT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // read_stmt ::= READ_FLOAT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
